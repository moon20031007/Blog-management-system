{"ast":null,"code":"export default {\n  data() {\n    return {\n      Tag: {},\n      Articles: [],\n      users: {}\n    };\n  },\n  async created() {\n    await this.fetchTag();\n    await this.fetchArticles().then(this.fetchNames(Object.keys(this.users)));\n  },\n  methods: {\n    async fetchTag() {\n      this.$http.get(`/tag/detail/${this.$route.params.id}`).then(response => {\n        if (response.data.code == 0) {\n          this.Tag = response.data.data;\n        } else {\n          this.$message.error('获取标签失败：' + response.data.msg);\n        }\n      }).catch(error => {\n        this.$message.error('获取标签失败：' + error);\n      });\n    },\n    async fetchArticles() {\n      this.$http.get(`/tag/${this.$route.params.id}/articles`).then(response => {\n        if (response.data.code == 0) {\n          this.Articles = response.data.data;\n          this.Articles.forEach(article => {\n            if (!this.users[article.authorId]) {\n              this.users[article.authorId] = '';\n            }\n          });\n        } else {\n          this.$message.error('获取文章失败：' + response.data.msg);\n        }\n        // this.fetchNames(Object.keys(this.users));\n      }).catch(error => {\n        this.$message.error('获取文章失败：' + error);\n      });\n    },\n    fetchNames(keys) {\n      this.$http.get(`/user/names`, {\n        params: {\n          userIds: keys.join(',')\n        }\n      }).then(response => {\n        if (response.data.code == 0) {\n          response.data.data.forEach(user => this.users[user.accountId.toString()] = user.nickname);\n        } else {\n          this.$message.error('获取用户名失败：' + response.data.msg);\n        }\n      }).catch(error => {\n        this.$message.error('获取用户名失败：' + error);\n      });\n    }\n  }\n};","map":{"version":3,"names":["data","Tag","Articles","users","created","fetchTag","fetchArticles","then","fetchNames","Object","keys","methods","$http","get","$route","params","id","response","code","$message","error","msg","catch","forEach","article","authorId","userIds","join","user","accountId","toString","nickname"],"sources":["src/views/TagSearchPage.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <my-nav></my-nav>\r\n        <h1>{{ this.Tag.tagName }}</h1>\r\n        <h1>{{ this.Tag.articleCount }}</h1>\r\n        <my-art-list :articles=\"this.Articles\" :users=\"this.users\"></my-art-list>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    data() {\r\n        return {\r\n            Tag: {},\r\n            Articles: [],\r\n            users: {}\r\n        }\r\n    },\r\n    async created() {\r\n        await this.fetchTag();\r\n        await this.fetchArticles().then(this.fetchNames(Object.keys(this.users)));\r\n    },\r\n    methods: {\r\n        async fetchTag() {\r\n            this.$http.get(`/tag/detail/${this.$route.params.id}`)\r\n                .then(response => {\r\n                    if (response.data.code == 0) {\r\n                        this.Tag = response.data.data;\r\n                    } else {\r\n                        this.$message.error('获取标签失败：' + response.data.msg);\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    this.$message.error('获取标签失败：' + error);\r\n                });\r\n        },\r\n        async fetchArticles() {\r\n            this.$http.get(`/tag/${this.$route.params.id}/articles`)\r\n                .then(response => {\r\n                    if (response.data.code == 0) {\r\n                        this.Articles = response.data.data;\r\n                        this.Articles.forEach(article => {\r\n                            if (!this.users[article.authorId]) {\r\n                                this.users[article.authorId] = '';\r\n                            }\r\n                        })\r\n                    } else {\r\n                        this.$message.error('获取文章失败：' + response.data.msg);\r\n                    }\r\n                    // this.fetchNames(Object.keys(this.users));\r\n                })\r\n                .catch(error => {\r\n                    this.$message.error('获取文章失败：' + error);\r\n                });\r\n        },\r\n        fetchNames(keys) {\r\n            this.$http.get(`/user/names`, { params: { userIds: keys.join(',') } })\r\n                .then(response => {\r\n                    if (response.data.code == 0) {\r\n                        response.data.data.forEach(user => this.users[user.accountId.toString()] = user.nickname);\r\n                    } else {\r\n                        this.$message.error('获取用户名失败：' + response.data.msg);\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    this.$message.error('获取用户名失败：' + error);\r\n                });\r\n        },\r\n    }\r\n}\r\n</script>\r\n\r\n<style>\r\nh1 {\r\n    text-align: center;\r\n}\r\n</style>"],"mappings":"AAUA;EACAA,KAAA;IACA;MACAC,GAAA;MACAC,QAAA;MACAC,KAAA;IACA;EACA;EACA,MAAAC,QAAA;IACA,WAAAC,QAAA;IACA,WAAAC,aAAA,GAAAC,IAAA,MAAAC,UAAA,CAAAC,MAAA,CAAAC,IAAA,MAAAP,KAAA;EACA;EACAQ,OAAA;IACA,MAAAN,SAAA;MACA,KAAAO,KAAA,CAAAC,GAAA,qBAAAC,MAAA,CAAAC,MAAA,CAAAC,EAAA,IACAT,IAAA,CAAAU,QAAA;QACA,IAAAA,QAAA,CAAAjB,IAAA,CAAAkB,IAAA;UACA,KAAAjB,GAAA,GAAAgB,QAAA,CAAAjB,IAAA,CAAAA,IAAA;QACA;UACA,KAAAmB,QAAA,CAAAC,KAAA,aAAAH,QAAA,CAAAjB,IAAA,CAAAqB,GAAA;QACA;MACA,GACAC,KAAA,CAAAF,KAAA;QACA,KAAAD,QAAA,CAAAC,KAAA,aAAAA,KAAA;MACA;IACA;IACA,MAAAd,cAAA;MACA,KAAAM,KAAA,CAAAC,GAAA,cAAAC,MAAA,CAAAC,MAAA,CAAAC,EAAA,aACAT,IAAA,CAAAU,QAAA;QACA,IAAAA,QAAA,CAAAjB,IAAA,CAAAkB,IAAA;UACA,KAAAhB,QAAA,GAAAe,QAAA,CAAAjB,IAAA,CAAAA,IAAA;UACA,KAAAE,QAAA,CAAAqB,OAAA,CAAAC,OAAA;YACA,UAAArB,KAAA,CAAAqB,OAAA,CAAAC,QAAA;cACA,KAAAtB,KAAA,CAAAqB,OAAA,CAAAC,QAAA;YACA;UACA;QACA;UACA,KAAAN,QAAA,CAAAC,KAAA,aAAAH,QAAA,CAAAjB,IAAA,CAAAqB,GAAA;QACA;QACA;MACA,GACAC,KAAA,CAAAF,KAAA;QACA,KAAAD,QAAA,CAAAC,KAAA,aAAAA,KAAA;MACA;IACA;IACAZ,WAAAE,IAAA;MACA,KAAAE,KAAA,CAAAC,GAAA;QAAAE,MAAA;UAAAW,OAAA,EAAAhB,IAAA,CAAAiB,IAAA;QAAA;MAAA,GACApB,IAAA,CAAAU,QAAA;QACA,IAAAA,QAAA,CAAAjB,IAAA,CAAAkB,IAAA;UACAD,QAAA,CAAAjB,IAAA,CAAAA,IAAA,CAAAuB,OAAA,CAAAK,IAAA,SAAAzB,KAAA,CAAAyB,IAAA,CAAAC,SAAA,CAAAC,QAAA,MAAAF,IAAA,CAAAG,QAAA;QACA;UACA,KAAAZ,QAAA,CAAAC,KAAA,cAAAH,QAAA,CAAAjB,IAAA,CAAAqB,GAAA;QACA;MACA,GACAC,KAAA,CAAAF,KAAA;QACA,KAAAD,QAAA,CAAAC,KAAA,cAAAA,KAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}