{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      article: {},\n      commentsKey: 0,\n      isReplyFormVisible: [],\n      tags: [],\n      comments: [],\n      replies: [],\n      commentForm: {\n        articleId: this.$route.params.id,\n        content: ''\n      },\n      replyForm: {\n        content: '',\n        replyType: '',\n        commentId: '',\n        toReplyId: '',\n        toId: ''\n      },\n      activeNames: [],\n      userIds: []\n    };\n  },\n  async created() {\n    await this.fetchArticle();\n    await this.fetchTags();\n    await this.fetchComments();\n    await this.fetchReplies();\n    await this.fetchNames();\n  },\n  methods: {\n    findReplies(id) {\n      return this.replies.filter(reply => reply.commentId === id);\n    },\n    showReplyView(commentId, type, replyId, toId) {\n      if (this.isReplyFormVisible.includes(commentId) && this.replyForm.toReplyId == replyId) {\n        this.isReplyFormVisible = [];\n      } else {\n        this.isReplyFormVisible = [];\n        this.isReplyFormVisible.push(commentId);\n      }\n      this.replyForm.replyType = type;\n      this.replyForm.commentId = commentId;\n      this.replyForm.toReplyId = replyId === 0 ? '' : replyId;\n      this.replyForm.toId = toId === 0 ? '' : toId;\n    },\n    submitComment() {\n      if (this.commentForm.content == '') {\n        this.$message.error('请输入评论内容');\n        return;\n      }\n      axios.post(`http://localhost:7000/comment/add`, this.commentForm).then(response => {\n        console.log(response.data);\n        this.$message.success('提交成功');\n        this.commentForm.content = '';\n        this.commentsKey++;\n      }).catch(error => {\n        console.error('提交文章失败:', error);\n        this.$message.error('提交文章失败');\n      });\n    },\n    submitReply() {\n      if (this.replyForm.content == '') {\n        this.$message.error('请输入回复内容');\n        return;\n      }\n      axios.post(`http://localhost:7000/reply/add`, this.replyForm).then(response => {\n        console.log(response.data);\n        this.$message.success('提交成功');\n        this.replyForm.content = '';\n        this.commentsKey++;\n      }).catch(error => {\n        console.error('提交回复失败:', error);\n        this.$message.error('提交回复失败');\n      });\n    },\n    async fetchArticle() {\n      axios.get(`http://localhost:7000/article/detail/${this.$route.params.id}`).then(response => {\n        this.article = response.data.data;\n        if (!this.userIds.includes(this.article.authorId)) {\n          this.userIds.push(this.article.authorId);\n        }\n      }).catch(error => {\n        console.error('获取文章失败:', error);\n        this.$message.error('获取文章失败');\n      });\n    },\n    async fetchTags() {\n      axios.get(`http://localhost:7000/tag/article/${this.$route.params.id}`).then(response => {\n        this.tags = response.data.data;\n      }).catch(error => {\n        console.error('获取标签失败:', error);\n        this.$message.error('获取标签失败');\n      });\n    },\n    async fetchComments() {\n      axios.get(`http://localhost:7000/comment/list/${this.$route.params.id}`).then(response => {\n        this.comments = response.data.data;\n        this.comments.forEach(comment => {\n          if (!this.userIds.includes(comment.commenterId)) {\n            this.userIds.push(comment.commenterId);\n          }\n        });\n      }).catch(error => {\n        console.error('获取评论失败:', error);\n        this.$message.error('获取评论失败');\n      });\n    },\n    async fetchReplies() {\n      axios.get(`http://localhost:7000/reply/list/${this.$route.params.id}`).then(response => {\n        this.replies = response.data.data;\n        this.replies.forEach(reply => {\n          if (!this.userIds.includes(reply.replierId)) {\n            this.userIds.push(reply.replierId);\n          }\n          if (reply.toReplyId) {\n            if (!this.userIds.includes(reply.toId)) {\n              this.userIds.push(reply.toId);\n            }\n          }\n        });\n      }).catch(error => {\n        console.error('获取回复失败:', error);\n        this.$message.error('获取回复失败');\n      });\n    },\n    async fetchNames() {\n      axios.get(`http://localhost:7000/user/names`, {\n        params: {\n          userIds: this.userIds.join(',')\n        }\n      }).then(response => {\n        console.log(response);\n        this.$message.success('获取用户名成功');\n      }).catch(error => {\n        console.log(error);\n        this.$message.error('获取用户名失败');\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","data","article","commentsKey","isReplyFormVisible","tags","comments","replies","commentForm","articleId","$route","params","id","content","replyForm","replyType","commentId","toReplyId","toId","activeNames","userIds","created","fetchArticle","fetchTags","fetchComments","fetchReplies","fetchNames","methods","findReplies","filter","reply","showReplyView","type","replyId","includes","push","submitComment","$message","error","post","then","response","console","log","success","catch","submitReply","get","authorId","forEach","comment","commenterId","replierId","join"],"sources":["src/views/ArticleView.vue"],"sourcesContent":["<template>\n    <div>\n        <my-nav></my-nav>\n        <el-container>\n            <el-aside width=\"300px\"><my-asi-list></my-asi-list></el-aside>\n            <el-main>\n                <article>\n                    <h1>{{ userIds }}</h1>\n                    <h2>{{ article.title }}</h2>\n                    <el-card class=\"custom-card\">\n                        <div class=\"card-content\">\n                            <i class=\"el-icon-user-solid\"></i>{{ article.authorId }}\n                            <i class=\"el-icon-upload\"></i>{{ $formatTime(article.publishTime) }}\n                            <i class=\"el-icon-view\"></i>{{ article.readCount }}\n                            <i class=\"el-icon-star-off\"></i>{{ article.likeCount }}\n                            <i class=\"el-icon-chat-line-round\"></i>{{ article.commentCount }}\n                        </div>\n                        <div>\n                            文章标签:\n                            <div v-for=\"tag in tags\" :key=\"tag.tagId\" class=\"tag\">\n                                <el-link :href=\"`/tag/${tag.tagId}`\"><el-tag>{{ tag.tagName }}</el-tag></el-link>\n                            </div>\n                        </div>\n                    </el-card>\n                    <p>{{ article.content }}</p>\n                </article>\n                <el-card v-bind:key=\"commentsKey\">\n                    <h3>评论区</h3>\n                    <el-form :model=\"commentForm\">\n                        <el-input v-model=\"commentForm.content\" type=\"textarea\" autosize placeholder=\"请输入评论\" style=\"width: 85%;\"></el-input>\n                        <el-button type=\"primary\" @click=\"submitComment()\">提交</el-button>\n                    </el-form>\n                    <div v-for=\"comment in comments\" :key=\"comment\">\n                        <i class=\"el-icon-user-solid user\">{{ comment.commenterId }}</i><br>\n                        {{ comment.content }}<br>\n                        <small>\n                            <i class=\"el-icon-time\"></i>{{ $formatTime(comment.commentTime) }}\n                            <i class=\"el-icon-star-off\"></i>{{ comment.likeCount }}\n                        </small>\n                        <el-button type=\"text\" @click=\"showReplyView(comment.commentId, 0, 0)\"><i class=\"el-icon-chat-line-square\">回复</i></el-button>\n                        <el-collapse v-model=\"activeNames\">\n                            <el-collapse-item v-if=\"findReplies(comment.commentId).length\" :title=\"activeNames.includes(comment.commentId) ? '收起' : '展开'\" :name=comment.commentId>\n                                <div v-for=\"reply in findReplies(comment.commentId)\" :key=\"reply\">\n                                    <i class=\"el-icon-user-solid user\">{{ reply.replierId }}：</i>\n                                    <template v-if=\"reply.replyType == 1\">\n                                        <span class=\"user\">@{{ reply.toId }}</span>\n                                    </template>\n                                    {{ reply.content }}<br>\n                                    <i class=\"el-icon-time\"></i>{{ $formatTime(reply.replyTime) }}\n                                    <i class=\"el-icon-star-off\"></i>{{ reply.likeCount }}\n                                    <el-button type=\"text\" @click=\"showReplyView(comment.commentId, 1, reply.replyId, reply.replierId)\"><i class=\"el-icon-chat-line-square\">回复</i></el-button><br>\n                                </div>\n                            </el-collapse-item>\n                            <el-form v-show=\"isReplyFormVisible.includes(comment.commentId)\" ref=\"replyForm\" :model=\"replyForm\">\n                                <el-input v-model=\"replyForm.content\" type=\"textarea\" autosize :placeholder=\"replyForm.toReplyId ? `回复 @${replyForm.toId}` : '回复'\" style=\"width: 85%;\"></el-input>\n                                <el-button type=\"primary\" @click=\"submitReply()\">提交</el-button>\n                            </el-form>\n                        </el-collapse>\n                    </div>\n                </el-card>\n            </el-main>\n        </el-container>\n    </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n    data() {\n        return {\n            article: {},\n            commentsKey: 0,\n            isReplyFormVisible: [],\n            tags: [],\n            comments: [],\n            replies: [],\n            commentForm: { articleId: this.$route.params.id, content: '' },\n            replyForm: { content: '', replyType: '', commentId: '', toReplyId: '', toId: ''},\n            activeNames: [],\n            userIds: []\n        };\n    },\n    async created() {\n        await this.fetchArticle();\n        await this.fetchTags();\n        await this.fetchComments();\n        await this.fetchReplies();\n        await this.fetchNames();\n    },\n    methods: {\n        findReplies(id) {\n            return this.replies.filter(reply => reply.commentId === id);\n        },\n        showReplyView(commentId, type, replyId, toId) {\n            if (this.isReplyFormVisible.includes(commentId) && this.replyForm.toReplyId == replyId) {\n                this.isReplyFormVisible = [];\n            } else {\n                this.isReplyFormVisible = [];\n                this.isReplyFormVisible.push(commentId);\n            }\n            this.replyForm.replyType = type;\n            this.replyForm.commentId = commentId;\n            this.replyForm.toReplyId = (replyId === 0) ? '' : replyId;\n            this.replyForm.toId = (toId === 0) ? '' : toId;\n        },\n        submitComment() {\n            if (this.commentForm.content == '') {\n                this.$message.error('请输入评论内容');\n                return;\n            }\n            axios.post(`http://localhost:7000/comment/add`, this.commentForm)\n                .then(response => {\n                    console.log(response.data);\n                    this.$message.success('提交成功');\n                    this.commentForm.content = '';\n                    this.commentsKey++;\n                })\n                .catch(error => {\n                    console.error('提交文章失败:', error);\n                    this.$message.error('提交文章失败');\n                });\n        },\n        submitReply() {\n            if (this.replyForm.content == '') {\n                this.$message.error('请输入回复内容');\n                return;\n            }\n            axios.post(`http://localhost:7000/reply/add`, this.replyForm)\n                .then(response => {\n                    console.log(response.data);\n                    this.$message.success('提交成功');\n                    this.replyForm.content = '';\n                    this.commentsKey++;\n                })\n                .catch(error => {\n                    console.error('提交回复失败:', error);\n                    this.$message.error('提交回复失败');\n                });\n        },\n        async fetchArticle() {\n            axios.get(`http://localhost:7000/article/detail/${this.$route.params.id}`)\n                .then(response => {\n                    this.article = response.data.data;\n                    if (!this.userIds.includes(this.article.authorId)) {\n                        this.userIds.push(this.article.authorId);\n                    }\n                })\n                .catch(error => {\n                    console.error('获取文章失败:', error);\n                    this.$message.error('获取文章失败');\n                });\n        },\n        async fetchTags() {\n            axios.get(`http://localhost:7000/tag/article/${this.$route.params.id}`)\n                .then(response => {\n                    this.tags = response.data.data;\n                })\n                .catch(error => {\n                    console.error('获取标签失败:', error);\n                    this.$message.error('获取标签失败');\n                });\n        },\n        async fetchComments() {\n            axios.get(`http://localhost:7000/comment/list/${this.$route.params.id}`)\n                .then(response => {\n                    this.comments = response.data.data;\n                    this.comments.forEach(comment => {\n                        if (!this.userIds.includes(comment.commenterId)) {\n                            this.userIds.push(comment.commenterId);\n                        }\n                    });\n                })\n                .catch(error => {\n                    console.error('获取评论失败:', error);\n                    this.$message.error('获取评论失败');\n                });\n        },\n        async fetchReplies() {\n            axios.get(`http://localhost:7000/reply/list/${this.$route.params.id}`)\n                .then(response => {\n                    this.replies = response.data.data;\n                    this.replies.forEach(reply => {\n                        if (!this.userIds.includes(reply.replierId)) {\n                            this.userIds.push(reply.replierId);\n                        }\n                        if (reply.toReplyId) {\n                            if (!this.userIds.includes(reply.toId)) {\n                                this.userIds.push(reply.toId);\n                            }\n                        }\n                    });\n                })\n                .catch(error => {\n                    console.error('获取回复失败:', error);\n                    this.$message.error('获取回复失败');\n                });\n        },\n        async fetchNames() {\n            axios.get(`http://localhost:7000/user/names`, {params: {userIds: this.userIds.join(',')}})\n                .then(response => {\n                    console.log(response);\n                    this.$message.success('获取用户名成功');\n                })\n                .catch(error => {\n                    console.log(error);\n                    this.$message.error('获取用户名失败');\n                });\n        }\n    }\n}\n</script>\n\n<style>\n.user {\n    color: slateblue;\n}\n\n.custom-card {\n    padding: 0px;\n}\n\n.card-content {\n    margin-bottom: 10px;\n}\n\n.tag {\n    display: inline;\n    margin-right: 5px;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}