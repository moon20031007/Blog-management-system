{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: \"MyArticleWriteEditor\",\n  data() {\n    var validateArea = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('留言不能为空'));\n      } else {\n        callback();\n      }\n    };\n    var validateTag = (rule, value, callback) => {\n      if (value.length === 0) {\n        callback(new Error('至少选择一个标签'));\n      } else {\n        callback();\n      }\n    };\n    return {\n      messageForm: {\n        title: '',\n        tag: [],\n        textarea: ''\n      },\n      rules: {\n        title: [{\n          required: true,\n          message: '请输入标题',\n          trigger: 'blur'\n        }],\n        tag: [{\n          validator: validateTag,\n          trigger: 'change'\n        }],\n        textarea: [{\n          validator: validateArea,\n          trigger: 'blur'\n        }]\n      },\n      cities: []\n    };\n  },\n  async created() {\n    await this.fetchCities();\n  },\n  methods: {\n    async fetchCities() {\n      this.$http.get('/tag/list').then(response => {\n        if (response.data.code == 0) {\n          this.cities = response.data.data;\n        } else {\n          this.$message.error('获取标签失败：' + response.data.msg);\n        }\n      }).catch(error => {\n        this.$message.error('获取标签失败：' + error);\n      });\n    },\n    submitForm(formName) {\n      this.$refs[formName].validate(valid => {\n        const form = {\n          article: {\n            title: this.messageForm.title,\n            content: this.messageForm.textarea\n          },\n          tagIDs: this.messageForm.tag.map(tag => tag.tagId)\n        };\n        console.log(form);\n        if (valid) {\n          this.$http.post('/article/add', form).then(response => {\n            if (response.data.code == 0) {\n              this.$message.success('文章提交成功！');\n              this.$router.push('/');\n            } else {\n              this.$message.error('文章提交失败：' + response.data.msg);\n            }\n          }).catch(error => {\n            this.$message.error('文章提交失败：' + error);\n          });\n        } else {\n          return false;\n        }\n      });\n    },\n    resetForm(formName) {\n      this.$refs[formName].resetFields();\n    }\n  }\n};","map":{"version":3,"names":["name","data","validateArea","rule","value","callback","Error","validateTag","length","messageForm","title","tag","textarea","rules","required","message","trigger","validator","cities","created","fetchCities","methods","$http","get","then","response","code","$message","error","msg","catch","submitForm","formName","$refs","validate","valid","form","article","content","tagIDs","map","tagId","console","log","post","success","$router","push","resetForm","resetFields"],"sources":["src/components/ArticleWriteEditor.vue"],"sourcesContent":["<template>\n    <div class=\"write-card\">\n        <el-form :model=\"messageForm\" status-icon :rules=\"rules\" ref=\"messageForm\" class=\"demo-ruleForm\">\n            <h1 style=\"color: black;\">开始你的创作</h1>\n            <el-form-item prop=\"title\" class=\"input\">\n                <el-input class=\"title\" type=\"text\" placeholder=\"标题\" v-model=\"messageForm.title\" maxlength=\"15\">\n                </el-input>\n            </el-form-item>\n\n            <el-form-item prop=\"textarea\" class=\"write-input\">\n                <el-input type=\"textarea\" placeholder=\"请输入你的文章\" :rows=\"20\" v-model=\"messageForm.textarea\"\n                    maxlength=\"2000\" show-word-limit>\n                </el-input>\n            </el-form-item>\n\n            <el-form-item class=\"form-checkbox\" prop=\"tag\">\n                <el-checkbox-group v-model=\"messageForm.tag\" :min=\"1\">\n                    <el-checkbox v-for=\"city in cities\" :label=\"city\" :key=\"city\" style=\"color: black;\">{{ city.tagName }}</el-checkbox>\n                </el-checkbox-group>\n            </el-form-item>\n\n            <el-form-item class=\"form-buttons\" style=\"display: flex;\">\n                <el-button size='small' style=\"margin-right: 600px;\">\n                    <router-link to=\"/\" style=\"text-decoration: none; color: black;\">回到首页</router-link>\n                </el-button>\n                <el-button type=\"primary\" @click=\"submitForm('messageForm')\" size='small'>提交</el-button>\n                <el-button @click=\"resetForm('messageForm')\" size='small'>重置</el-button>\n            </el-form-item>\n        </el-form>\n    </div>\n</template>\n\n<script>\nexport default {\n    name: \"MyArticleWriteEditor\",\n    data() {\n        var validateArea = (rule, value, callback) => {\n            if (value === '') {\n                callback(new Error('留言不能为空'));\n            } else {\n                callback();\n            }\n        };\n        var validateTag = (rule, value, callback) => {\n            if (value.length === 0) {\n                callback(new Error('至少选择一个标签'));\n            } else {\n                callback();\n            }\n        };\n        return {\n            messageForm: {\n                title: '',\n                tag: [],\n                textarea: ''\n            },\n            rules: {\n                title: [\n                    { required: true, message: '请输入标题', trigger: 'blur' }\n                ],\n                tag: [\n                    { validator: validateTag, trigger: 'change' }\n                ],\n                textarea: [\n                    { validator: validateArea, trigger: 'blur' }\n                ]\n            },\n            cities: []\n        };\n    },\n    async created() {\n        await this.fetchCities();\n    },\n    methods: {\n        async fetchCities() {\n            this.$http.get('/tag/list')\n                .then(response => {\n                    if (response.data.code == 0) {\n                        this.cities = response.data.data;\n                    } else {\n                        this.$message.error('获取标签失败：' + response.data.msg);\n                    }\n                })\n                .catch(error => {\n                    this.$message.error('获取标签失败：' + error);\n                });\n        },\n        submitForm(formName) {\n            this.$refs[formName].validate((valid) => {\n                const form = {\n                    article: {\n                        title: this.messageForm.title,\n                        content: this.messageForm.textarea\n                    },\n                    tagIDs: this.messageForm.tag.map(tag => tag.tagId)\n                };\n                console.log(form);\n                if (valid) {\n                    this.$http.post('/article/add', form)\n                        .then(response => {\n                            if (response.data.code == 0) {\n                                this.$message.success('文章提交成功！');\n                                this.$router.push('/');\n                            } else {\n                                this.$message.error('文章提交失败：' + response.data.msg);\n                            }\n                        })\n                        .catch(error => {\n                            this.$message.error('文章提交失败：' + error);\n                        });\n                } else {\n                    return false;\n                }\n            });\n        },\n        resetForm(formName) {\n            this.$refs[formName].resetFields();\n        }\n    }\n}\n</script>\n\n<style>\n.write-card {\n    display: flex;\n    justify-content: center;\n    position: relative;\n}\n\n.write-input {\n    margin-bottom: 10px;\n    margin-top: 1.5rem;\n    width: 50rem;\n}\n\n.title {\n    font-size: 25px;\n    font-weight: bold;\n}\n\n.el-checkbox-group {\n    display: flex;\n    flex-direction: row;\n}\n\n.form-checkbox {\n    display: flex;\n    justify-content: left;\n    margin: 0;\n}\n\n.form-buttons {\n    display: flex;\n    justify-content: flex-end;\n    margin-top: 0;\n\n}\n\n.back-home-button {\n    position: absolute;\n    left: 0;\n    top: 0;\n    margin-right: 10px;\n    margin-top: 10px;\n}\n\n.demo-ruleForm {\n    margin-top: 40px;\n}\n</style>"],"mappings":";AAiCA;EACAA,IAAA;EACAC,KAAA;IACA,IAAAC,YAAA,GAAAA,CAAAC,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,IAAAD,KAAA;QACAC,QAAA,KAAAC,KAAA;MACA;QACAD,QAAA;MACA;IACA;IACA,IAAAE,WAAA,GAAAA,CAAAJ,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,IAAAD,KAAA,CAAAI,MAAA;QACAH,QAAA,KAAAC,KAAA;MACA;QACAD,QAAA;MACA;IACA;IACA;MACAI,WAAA;QACAC,KAAA;QACAC,GAAA;QACAC,QAAA;MACA;MACAC,KAAA;QACAH,KAAA,GACA;UAAAI,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,EACA;QACAL,GAAA,GACA;UAAAM,SAAA,EAAAV,WAAA;UAAAS,OAAA;QAAA,EACA;QACAJ,QAAA,GACA;UAAAK,SAAA,EAAAf,YAAA;UAAAc,OAAA;QAAA;MAEA;MACAE,MAAA;IACA;EACA;EACA,MAAAC,QAAA;IACA,WAAAC,WAAA;EACA;EACAC,OAAA;IACA,MAAAD,YAAA;MACA,KAAAE,KAAA,CAAAC,GAAA,cACAC,IAAA,CAAAC,QAAA;QACA,IAAAA,QAAA,CAAAxB,IAAA,CAAAyB,IAAA;UACA,KAAAR,MAAA,GAAAO,QAAA,CAAAxB,IAAA,CAAAA,IAAA;QACA;UACA,KAAA0B,QAAA,CAAAC,KAAA,aAAAH,QAAA,CAAAxB,IAAA,CAAA4B,GAAA;QACA;MACA,GACAC,KAAA,CAAAF,KAAA;QACA,KAAAD,QAAA,CAAAC,KAAA,aAAAA,KAAA;MACA;IACA;IACAG,WAAAC,QAAA;MACA,KAAAC,KAAA,CAAAD,QAAA,EAAAE,QAAA,CAAAC,KAAA;QACA,MAAAC,IAAA;UACAC,OAAA;YACA3B,KAAA,OAAAD,WAAA,CAAAC,KAAA;YACA4B,OAAA,OAAA7B,WAAA,CAAAG;UACA;UACA2B,MAAA,OAAA9B,WAAA,CAAAE,GAAA,CAAA6B,GAAA,CAAA7B,GAAA,IAAAA,GAAA,CAAA8B,KAAA;QACA;QACAC,OAAA,CAAAC,GAAA,CAAAP,IAAA;QACA,IAAAD,KAAA;UACA,KAAAb,KAAA,CAAAsB,IAAA,iBAAAR,IAAA,EACAZ,IAAA,CAAAC,QAAA;YACA,IAAAA,QAAA,CAAAxB,IAAA,CAAAyB,IAAA;cACA,KAAAC,QAAA,CAAAkB,OAAA;cACA,KAAAC,OAAA,CAAAC,IAAA;YACA;cACA,KAAApB,QAAA,CAAAC,KAAA,aAAAH,QAAA,CAAAxB,IAAA,CAAA4B,GAAA;YACA;UACA,GACAC,KAAA,CAAAF,KAAA;YACA,KAAAD,QAAA,CAAAC,KAAA,aAAAA,KAAA;UACA;QACA;UACA;QACA;MACA;IACA;IACAoB,UAAAhB,QAAA;MACA,KAAAC,KAAA,CAAAD,QAAA,EAAAiB,WAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}