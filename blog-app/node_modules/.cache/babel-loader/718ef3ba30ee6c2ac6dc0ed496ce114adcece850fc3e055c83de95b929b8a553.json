{"ast":null,"code":"export default {\n  name: 'MyLmessageList',\n  data() {\n    return {\n      lmessages: [],\n      users: {},\n      lmessageKey: 0\n    };\n  },\n  async created() {\n    await this.fetchLmessages();\n  },\n  methods: {\n    async fetchLmessages() {\n      this.$http.get('/lmessage/list').then(response => {\n        if (response.data.code == 0) {\n          this.lmessages = response.data.data;\n          this.lmessages.forEach(lmessage => {\n            if (!this.users[lmessage.commenterId]) {\n              this.users[lmessage.commenterId] = '';\n            }\n          });\n        } else {\n          this.$message.error('获取留言失败：' + response.data.msg);\n        }\n        this.fetchNames(Object.keys(this.users));\n        this.fetchLikes();\n      }).catch(error => {\n        this.$message.error('获取留言失败：' + error);\n      });\n    },\n    async fetchNames(keys) {\n      let userIdsParam = keys.length == 1 ? keys[0] : keys.join(',');\n      this.$http.get(`/user/names`, {\n        params: {\n          userIds: userIdsParam\n        }\n      }).then(response => {\n        if (response.data.code == 0) {\n          response.data.data.forEach(user => this.users[user.accountId.toString()] = user.nickname);\n          this.lmessageKey++;\n        } else {\n          this.$message.error('获取用户名失败：' + response.data.msg);\n        }\n      }).catch(error => {\n        this.$message.error('获取用户名失败：' + error);\n      });\n    },\n    async fetchLikes() {\n      this.lmessages.forEach(lmessage => {\n        this.$http.get(`/like/Lmessage/${lmessage.lmessageId}`).then(response => {\n          if (response.data.code == 0 && response.data.data == true) {\n            console.log('a');\n          }\n        }).catch(error => {\n          this.$message.error('获取点赞信息失败：' + error);\n        });\n      });\n    }\n  }\n};","map":{"version":3,"names":["name","data","lmessages","users","lmessageKey","created","fetchLmessages","methods","$http","get","then","response","code","forEach","lmessage","commenterId","$message","error","msg","fetchNames","Object","keys","fetchLikes","catch","userIdsParam","length","join","params","userIds","user","accountId","toString","nickname","lmessageId","console","log"],"sources":["src/components/LmessageList.vue"],"sourcesContent":["<template>\r\n    <div class=\"lmessage-list\">\r\n        <p>已有留言共{{ lmessages.length }}条</p>\r\n        <main :key=\"lmessageKey\">\r\n            <article v-for=\"lmessage in lmessages\" :key=\"lmessage.lmessageId\">\r\n                <div class=\"lmessage-card\">\r\n                    <header>\r\n                        <p class=\"meta\">By {{ users[lmessage.commenterId] }} on {{ $formatTime(lmessage.leaveTime) }}\r\n                        </p>\r\n                    </header>\r\n                    <section>\r\n                        <p>{{ lmessage.content }}</p>\r\n                    </section>\r\n                </div>\r\n            </article>\r\n        </main>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    name: 'MyLmessageList',\r\n    data() {\r\n        return {\r\n            lmessages: [],\r\n            users: {},\r\n            lmessageKey: 0\r\n        }\r\n    },\r\n    async created() {\r\n        await this.fetchLmessages();\r\n    },\r\n    methods: {\r\n        async fetchLmessages() {\r\n            this.$http.get('/lmessage/list')\r\n                .then(response => {\r\n                    if (response.data.code == 0) {\r\n                        this.lmessages = response.data.data;\r\n                        this.lmessages.forEach(lmessage => {\r\n                            if (!this.users[lmessage.commenterId]) {\r\n                                this.users[lmessage.commenterId] = '';\r\n                            }\r\n                        });\r\n                    } else {\r\n                        this.$message.error('获取留言失败：' + response.data.msg);\r\n                    }\r\n                    this.fetchNames(Object.keys(this.users));\r\n                    this.fetchLikes();\r\n                })\r\n                .catch(error => {\r\n                    this.$message.error('获取留言失败：' + error);\r\n                });\r\n        },\r\n        async fetchNames(keys) {\r\n            let userIdsParam = keys.length == 1 ? keys[0] : keys.join(',');\r\n            this.$http.get(`/user/names`, { params: { userIds: userIdsParam } })\r\n                .then(response => {\r\n                    if (response.data.code == 0) {\r\n                        response.data.data.forEach(user => this.users[user.accountId.toString()] = user.nickname);\r\n                        this.lmessageKey++;\r\n                    } else {\r\n                        this.$message.error('获取用户名失败：' + response.data.msg);\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    this.$message.error('获取用户名失败：' + error);\r\n                });\r\n        },\r\n        async fetchLikes() {\r\n            this.lmessages.forEach(lmessage => {\r\n                this.$http.get(`/like/Lmessage/${lmessage.lmessageId}`)\r\n                    .then(response => {\r\n                        if (response.data.code == 0 && response.data.data == true) {\r\n                            console.log('a');\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        this.$message.error('获取点赞信息失败：' + error);\r\n                    });\r\n            });\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style>\r\n.lmessage-list {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 1rem;\r\n    margin: 3rem;\r\n    border: 1px solid #ddd;\r\n    padding: 1rem;\r\n    border-radius: 0.5rem;\r\n    box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.lmessage-card {\r\n    border: 1px solid #ddd;\r\n    padding: 1rem;\r\n    border-radius: 0.5rem;\r\n\r\n}\r\n\r\narticle .meta {\r\n    font-size: 0.9em;\r\n    color: #666;\r\n}\r\n</style>"],"mappings":"AAoBA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,SAAA;MACAC,KAAA;MACAC,WAAA;IACA;EACA;EACA,MAAAC,QAAA;IACA,WAAAC,cAAA;EACA;EACAC,OAAA;IACA,MAAAD,eAAA;MACA,KAAAE,KAAA,CAAAC,GAAA,mBACAC,IAAA,CAAAC,QAAA;QACA,IAAAA,QAAA,CAAAV,IAAA,CAAAW,IAAA;UACA,KAAAV,SAAA,GAAAS,QAAA,CAAAV,IAAA,CAAAA,IAAA;UACA,KAAAC,SAAA,CAAAW,OAAA,CAAAC,QAAA;YACA,UAAAX,KAAA,CAAAW,QAAA,CAAAC,WAAA;cACA,KAAAZ,KAAA,CAAAW,QAAA,CAAAC,WAAA;YACA;UACA;QACA;UACA,KAAAC,QAAA,CAAAC,KAAA,aAAAN,QAAA,CAAAV,IAAA,CAAAiB,GAAA;QACA;QACA,KAAAC,UAAA,CAAAC,MAAA,CAAAC,IAAA,MAAAlB,KAAA;QACA,KAAAmB,UAAA;MACA,GACAC,KAAA,CAAAN,KAAA;QACA,KAAAD,QAAA,CAAAC,KAAA,aAAAA,KAAA;MACA;IACA;IACA,MAAAE,WAAAE,IAAA;MACA,IAAAG,YAAA,GAAAH,IAAA,CAAAI,MAAA,QAAAJ,IAAA,MAAAA,IAAA,CAAAK,IAAA;MACA,KAAAlB,KAAA,CAAAC,GAAA;QAAAkB,MAAA;UAAAC,OAAA,EAAAJ;QAAA;MAAA,GACAd,IAAA,CAAAC,QAAA;QACA,IAAAA,QAAA,CAAAV,IAAA,CAAAW,IAAA;UACAD,QAAA,CAAAV,IAAA,CAAAA,IAAA,CAAAY,OAAA,CAAAgB,IAAA,SAAA1B,KAAA,CAAA0B,IAAA,CAAAC,SAAA,CAAAC,QAAA,MAAAF,IAAA,CAAAG,QAAA;UACA,KAAA5B,WAAA;QACA;UACA,KAAAY,QAAA,CAAAC,KAAA,cAAAN,QAAA,CAAAV,IAAA,CAAAiB,GAAA;QACA;MACA,GACAK,KAAA,CAAAN,KAAA;QACA,KAAAD,QAAA,CAAAC,KAAA,cAAAA,KAAA;MACA;IACA;IACA,MAAAK,WAAA;MACA,KAAApB,SAAA,CAAAW,OAAA,CAAAC,QAAA;QACA,KAAAN,KAAA,CAAAC,GAAA,mBAAAK,QAAA,CAAAmB,UAAA,IACAvB,IAAA,CAAAC,QAAA;UACA,IAAAA,QAAA,CAAAV,IAAA,CAAAW,IAAA,SAAAD,QAAA,CAAAV,IAAA,CAAAA,IAAA;YACAiC,OAAA,CAAAC,GAAA;UACA;QACA,GACAZ,KAAA,CAAAN,KAAA;UACA,KAAAD,QAAA,CAAAC,KAAA,eAAAA,KAAA;QACA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}