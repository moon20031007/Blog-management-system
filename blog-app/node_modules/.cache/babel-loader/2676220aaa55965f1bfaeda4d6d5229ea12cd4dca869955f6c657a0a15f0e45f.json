{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: \"MyLmessageEditor\",\n  data() {\n    var valiteArea = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('留言不能为空'));\n      } else {\n        callback();\n      }\n    };\n    return {\n      messageForm: {\n        textarea: ''\n      },\n      rules: {\n        textarea: [{\n          validator: valiteArea,\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  methods: {\n    submitForm(formName) {\n      this.$refs[formName].validate(valid => {\n        const form = {\n          Lmessage: this.messageForm.textarea\n        };\n        if (valid) {\n          console.log('提交的留言内容:', this.ruleForm.textarea);\n          axios.post('/lmessage', form).then(response => {\n            console.log(response.data);\n            this.$message({\n              message: '留言提交成功！',\n              type: 'success'\n            });\n          }).catch(error => {\n            console.error('留言提交失败:', error);\n            this.$message.error('登录失败，请检查登陆状态');\n          });\n        } else {\n          return false;\n        }\n      });\n    },\n    resetForm(formName) {\n      this.$refs[formName].resetFields();\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","valiteArea","rule","value","callback","Error","messageForm","textarea","rules","validator","trigger","methods","submitForm","formName","$refs","validate","valid","form","Lmessage","console","log","ruleForm","post","then","response","$message","message","type","catch","error","resetForm","resetFields"],"sources":["src/views/LmessageEditor.vue"],"sourcesContent":["<template>\r\n    <div class=\"article-card\">\r\n      <el-form :model=\"messageForm\" status-icon :rules=\"rules\" ref=\"messageForm\" class=\"demo-ruleForm\">\r\n        <el-form-item prop=\"textarea\" class=\"input\">\r\n            <el-input\r\n              type=\"textarea\"\r\n              placeholder=\"请输入你的留言\"\r\n              :rows=\"10\"\r\n              v-model=\"messageForm.textarea\"\r\n              maxlength=\"100\"\r\n              show-word-limit\r\n            >\r\n            </el-input>\r\n        </el-form-item> \r\n        <el-form-item class=\"form-buttons\">\r\n                  <el-button type=\"primary\" @click=\"submitForm('messageForm') \" size='small'>提交</el-button>\r\n                  <el-button @click=\"resetForm('messageForm')\" size='small' >重置</el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n      </div>\r\n  </template>\r\n  \r\n  \r\n  <script>\r\n  import axios from 'axios';\r\n  \r\n  export default {\r\n    name:\"MyLmessageEditor\",\r\n    data() {\r\n      var valiteArea = (rule, value, callback) => {\r\n              if (value === '') {\r\n                  callback(new Error('留言不能为空'));\r\n              } else {\r\n                  callback();\r\n              }\r\n          };\r\n          return{\r\n              messageForm: {\r\n                  textarea: ''\r\n              },\r\n              rules: {\r\n                  textarea: [\r\n                      { validator: valiteArea, trigger: 'blur' }\r\n                  ]\r\n              }\r\n          };\r\n    },\r\n    methods: {\r\n          submitForm(formName) {\r\n              this.$refs[formName].validate((valid) => {\r\n                  const form = { Lmessage: this.messageForm.textarea};\r\n                  if (valid) {\r\n                      console.log('提交的留言内容:', this.ruleForm.textarea);\r\n                      axios.post('/lmessage', form)\r\n                          .then(response => {\r\n                              console.log(response.data);\r\n                              this.$message({\r\n                                  message: '留言提交成功！',\r\n                                  type: 'success'\r\n                              });\r\n                          })\r\n                          .catch(error => {\r\n                              console.error('留言提交失败:', error);\r\n                              this.$message.error('登录失败，请检查登陆状态',);\r\n                          });\r\n                  } else {\r\n                      return false;\r\n                  }\r\n              });\r\n          },\r\n          resetForm(formName) {\r\n              this.$refs[formName].resetFields();\r\n          }\r\n      }\r\n    \r\n  }\r\n  </script>\r\n  \r\n  <style>\r\n  \r\n  .Lmessage-card {\r\n      border: 1px solid #ddd;\r\n      padding: 1rem;\r\n      border-radius: 0.5rem;\r\n      box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);\r\n  }\r\n  \r\n  .input {\r\n      margin-bottom: 0.5rem;\r\n      margin-top: 1.5rem;\r\n  }\r\n  \r\n  .form-buttons {\r\n    display: flex;\r\n    justify-content: flex-end;\r\n  }\r\n  \r\n  \r\n  </style>"],"mappings":"AAwBA,OAAAA,KAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA,IAAAC,UAAA,GAAAA,CAAAC,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,IAAAD,KAAA;QACAC,QAAA,KAAAC,KAAA;MACA;QACAD,QAAA;MACA;IACA;IACA;MACAE,WAAA;QACAC,QAAA;MACA;MACAC,KAAA;QACAD,QAAA,GACA;UAAAE,SAAA,EAAAR,UAAA;UAAAS,OAAA;QAAA;MAEA;IACA;EACA;EACAC,OAAA;IACAC,WAAAC,QAAA;MACA,KAAAC,KAAA,CAAAD,QAAA,EAAAE,QAAA,CAAAC,KAAA;QACA,MAAAC,IAAA;UAAAC,QAAA,OAAAZ,WAAA,CAAAC;QAAA;QACA,IAAAS,KAAA;UACAG,OAAA,CAAAC,GAAA,kBAAAC,QAAA,CAAAd,QAAA;UACAT,KAAA,CAAAwB,IAAA,cAAAL,IAAA,EACAM,IAAA,CAAAC,QAAA;YACAL,OAAA,CAAAC,GAAA,CAAAI,QAAA,CAAAxB,IAAA;YACA,KAAAyB,QAAA;cACAC,OAAA;cACAC,IAAA;YACA;UACA,GACAC,KAAA,CAAAC,KAAA;YACAV,OAAA,CAAAU,KAAA,YAAAA,KAAA;YACA,KAAAJ,QAAA,CAAAI,KAAA;UACA;QACA;UACA;QACA;MACA;IACA;IACAC,UAAAjB,QAAA;MACA,KAAAC,KAAA,CAAAD,QAAA,EAAAkB,WAAA;IACA;EACA;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}