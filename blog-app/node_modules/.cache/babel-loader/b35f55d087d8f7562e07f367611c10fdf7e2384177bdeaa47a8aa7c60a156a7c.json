{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      article: {},\n      commentsKey: 0,\n      isReplyFormVisible: [],\n      tags: [],\n      comments: [],\n      replies: [{\n        replyId: 1,\n        replierId: 1,\n        commentId: 1,\n        replyType: 0,\n        content: \"回复内容\",\n        replyTime: '2024-8-9',\n        likeCount: 0,\n        toId: 1,\n        toReplyId: 1\n      }, {\n        replyId: 2,\n        replierId: 1,\n        commentId: 1,\n        replyType: 1,\n        content: \"回复的回复内容\",\n        replyTime: '2024-8-9',\n        likeCount: 0,\n        toId: 1,\n        toReplyId: 1\n      }, {\n        replyId: 3,\n        replierId: 1,\n        commentId: 2,\n        replyType: 0,\n        content: \"第二个的回复内容\",\n        replyTime: '2024-8-9',\n        likeCount: 0,\n        toId: 1,\n        toReplyId: 1\n      }],\n      commentForm: {\n        articleId: this.$route.params.id,\n        content: ''\n      },\n      replyForm: {\n        content: '',\n        replyType: '',\n        commentId: '',\n        toReplyId: ''\n      },\n      activeNames: []\n    };\n  },\n  async created() {\n    await this.fetchArticle();\n    await this.fetchTags();\n    await this.fetchComments();\n    await this.fetchReplies();\n  },\n  methods: {\n    findReplies(id) {\n      return this.replies.filter(reply => reply.commentId === id);\n    },\n    showReplyView(commentId, type, replyId) {\n      if (this.isReplyFormVisible.includes(commentId)) {\n        this.isReplyFormVisible = [];\n      } else {\n        this.isReplyFormVisible = [];\n        this.isReplyFormVisible.push(commentId);\n      }\n      this.replyForm.replyType = type;\n      this.replyForm.commentId = commentId;\n      this.replyForm.toReplyId = replyId === 0 ? '' : replyId;\n      console.log(this.replyForm);\n    },\n    submitComment() {\n      axios.post(`http://localhost:7000/comment/add`, this.commentForm).then(response => {\n        console.log(response.data);\n        this.$message.success('提交成功');\n        this.commentForm.content = '';\n        this.commentsKey++;\n      }).catch(error => {\n        console.error('提交文章失败:', error);\n        this.$message.error('提交文章失败');\n      });\n    },\n    submitReply() {\n      console.log(this.replyForm);\n      axios.post(`http://localhost:7000/reply/add`, this.replyForm).then(response => {\n        console.log(response.data);\n        this.$message.success('提交成功');\n        this.replyForm.content = '';\n        this.commentsKey++;\n      }).catch(error => {\n        console.error('提交回复失败:', error);\n        this.$message.error('提交回复失败');\n      });\n    },\n    async fetchArticle() {\n      axios.get(`http://localhost:7000/article/detail/${this.$route.params.id}`).then(response => {\n        this.article = response.data.data;\n      }).catch(error => {\n        console.error('获取文章失败:', error);\n        this.$message.error('获取文章失败');\n      });\n    },\n    async fetchTags() {\n      axios.get(`http://localhost:7000/tag/article/${this.$route.params.id}`).then(response => {\n        this.tags = response.data.data;\n      }).catch(error => {\n        console.error('获取标签失败:', error);\n        this.$message.error('获取标签失败');\n      });\n    },\n    async fetchComments() {\n      axios.get(`http://localhost:7000/comment/list/${this.$route.params.id}`).then(response => {\n        this.comments = response.data.data;\n      }).catch(error => {\n        console.error('获取评论失败:', error);\n        this.$message.error('获取评论失败');\n      });\n    },\n    async fetchReplies() {\n      axios.get(`http://localhost:7000/article/replies/${this.$route.params.id}`).then(response => {\n        this.replies = response.data.data;\n      }).catch(error => {\n        console.error('获取回复失败:', error);\n        this.$message.error('获取回复失败');\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","data","article","commentsKey","isReplyFormVisible","tags","comments","replies","replyId","replierId","commentId","replyType","content","replyTime","likeCount","toId","toReplyId","commentForm","articleId","$route","params","id","replyForm","activeNames","created","fetchArticle","fetchTags","fetchComments","fetchReplies","methods","findReplies","filter","reply","showReplyView","type","includes","push","console","log","submitComment","post","then","response","$message","success","catch","error","submitReply","get"],"sources":["src/views/ArticleView.vue"],"sourcesContent":["<template>\n    <div>\n        <my-nav></my-nav>\n        <el-container>\n            <el-aside width=\"300px\"><my-asi-list></my-asi-list></el-aside>\n            <el-main>\n                <article>\n                    <h2>{{ article.title }}</h2>\n                    <el-card class=\"custom-card\">\n                        <div class=\"card-content\">\n                            <i class=\"el-icon-user-solid\"></i>{{ article.author }}\n                            <i class=\"el-icon-upload\"></i>{{ article.publishTime }}\n                            <i class=\"el-icon-view\"></i>{{ article.readCount }}\n                            <i class=\"el-icon-star-off\"></i>{{ article.likeCount }}\n                            <i class=\"el-icon-chat-line-round\"></i>{{ article.commentCount }}\n                        </div>\n                        <div>\n                            文章标签:\n                            <div v-for=\"tag in tags\" :key=\"tag\" class=\"tag\">\n                                <el-tag>{{ tag.tagName }}</el-tag>\n                            </div>\n                        </div>\n                    </el-card>\n                    <p>{{ article.content }}</p>\n                </article>\n                <el-card v-bind:key=\"commentsKey\">\n                    <h3>评论区</h3>\n                    <el-form :model=\"commentForm\">\n                        <el-input v-model=\"commentForm.content\" type=\"textarea\" autosize placeholder=\"请输入评论\" style=\"width: 85%;\"></el-input>\n                        <el-button type=\"primary\" @click=\"submitComment()\">提交</el-button>\n                    </el-form>\n                    <div v-for=\"comment in comments\" :key=\"comment\">\n                        <i class=\"el-icon-user-solid user\">{{ comment.commenter }}</i><br>\n                        {{ comment.content }}<br>\n                        <small>\n                            <i class=\"el-icon-time\"></i>{{ comment.comment_time }}\n                            <i class=\"el-icon-star-off\"></i>{{ comment.like_count }}\n                        </small>\n                        <el-button type=\"text\" @click=\"showReplyView(comment.commentId, 0, 0)\"><i class=\"el-icon-chat-line-square\">回复</i></el-button>\n                        <el-collapse v-model=\"activeNames\">\n                            <el-collapse-item v-if=\"findReplies(comment.commentId).length\" :title=\"activeNames.includes(comment.commentId) ? '收起' : '展开'\" :name=comment.commentId>\n                                <div v-for=\"reply in findReplies(comment.commentId)\" :key=\"reply\">\n                                    <i class=\"el-icon-user-solid user\">{{ reply.replierId }}：</i>\n                                    <template v-if=\"reply.replyType == 1\">\n                                        <span class=\"user\">@{{ reply.toId }}</span>\n                                    </template>\n                                    {{ reply.content }}<br>\n                                    <i class=\"el-icon-time\"></i>{{ reply.replyTime }}\n                                    <i class=\"el-icon-star-off\"></i>{{ reply.likeCount }}\n                                    <el-button type=\"text\" @click=\"showReplyView(comment.commentId, 1, reply.replyId)\"><i class=\"el-icon-chat-line-square\">回复</i></el-button><br>\n                                </div>\n                            </el-collapse-item>\n                            <el-form v-show=\"isReplyFormVisible.includes(comment.commentId)\" ref=\"replyForm\" :model=\"replyForm\">\n                                <el-input v-model=\"replyForm.content\" type=\"textarea\" autosize placeholder=\"请输入回复\" style=\"width: 85%;\"></el-input>\n                                <el-button type=\"primary\" @click=\"submitReply()\">提交</el-button>\n                            </el-form>\n                        </el-collapse>\n                    </div>\n                </el-card>\n            </el-main>\n        </el-container>\n    </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n    data() {\n        return {\n            article: {},\n            commentsKey: 0,\n            isReplyFormVisible: [],\n            tags: [],\n            comments: [],\n            replies: [\n                { replyId: 1, replierId: 1, commentId: 1, replyType: 0, content: \"回复内容\", replyTime: '2024-8-9', likeCount: 0, toId: 1, toReplyId: 1 },\n                { replyId: 2, replierId: 1, commentId: 1, replyType: 1, content: \"回复的回复内容\", replyTime: '2024-8-9', likeCount: 0, toId: 1, toReplyId: 1 },\n                { replyId: 3, replierId: 1, commentId: 2, replyType: 0, content: \"第二个的回复内容\", replyTime: '2024-8-9', likeCount: 0, toId: 1, toReplyId: 1 }\n            ],\n            commentForm: { articleId: this.$route.params.id, content: '' },\n            replyForm: { content: '', replyType: '', commentId: '', toReplyId: ''},\n            activeNames: []\n        };\n    },\n    async created() {\n        await this.fetchArticle();\n        await this.fetchTags();\n        await this.fetchComments();\n        await this.fetchReplies();\n    },\n    methods: {\n        findReplies(id) {\n            return this.replies.filter(reply => reply.commentId === id);\n        },\n        showReplyView(commentId, type, replyId) {\n            if (this.isReplyFormVisible.includes(commentId)) {\n                this.isReplyFormVisible = [];\n            } else {\n                this.isReplyFormVisible = [];\n                this.isReplyFormVisible.push(commentId);     \n            }\n            this.replyForm.replyType = type;\n            this.replyForm.commentId = commentId;\n            this.replyForm.toReplyId = (replyId === 0) ? '' : replyId;\n            console.log(this.replyForm);\n        },\n        submitComment() {\n            axios.post(`http://localhost:7000/comment/add`, this.commentForm)\n                .then(response => {\n                    console.log(response.data);\n                    this.$message.success('提交成功');\n                    this.commentForm.content = '';\n                    this.commentsKey++;\n                })\n                .catch(error => {\n                    console.error('提交文章失败:', error);\n                    this.$message.error('提交文章失败');\n                });\n        },\n        submitReply() {\n            console.log(this.replyForm);\n            axios.post(`http://localhost:7000/reply/add`, this.replyForm)\n                .then(response => {\n                    console.log(response.data);\n                    this.$message.success('提交成功');\n                    this.replyForm.content = '';\n                    this.commentsKey++;\n                })\n                .catch(error => {\n                    console.error('提交回复失败:', error);\n                    this.$message.error('提交回复失败');\n                });\n        },\n        async fetchArticle() {\n            axios.get(`http://localhost:7000/article/detail/${this.$route.params.id}`)\n                .then(response => {\n                    this.article = response.data.data;\n                })\n                .catch(error => {\n                    console.error('获取文章失败:', error);\n                    this.$message.error('获取文章失败');\n                });\n        },\n        async fetchTags() {\n            axios.get(`http://localhost:7000/tag/article/${this.$route.params.id}`)\n                .then(response => {\n                    this.tags = response.data.data;\n                })\n                .catch(error => {\n                    console.error('获取标签失败:', error);\n                    this.$message.error('获取标签失败');\n                });\n        },\n        async fetchComments() {\n            axios.get(`http://localhost:7000/comment/list/${this.$route.params.id}`)\n                .then(response => {\n                    this.comments = response.data.data;\n                })\n                .catch(error => {\n                    console.error('获取评论失败:', error);\n                    this.$message.error('获取评论失败');\n                });\n        },\n        async fetchReplies() {\n            axios.get(`http://localhost:7000/article/replies/${this.$route.params.id}`)\n                .then(response => {\n                    this.replies = response.data.data;\n                })\n                .catch(error => {\n                    console.error('获取回复失败:', error);\n                    this.$message.error('获取回复失败');\n                });\n        }\n    }\n}\n</script>\n\n<style>\n.user {\n    color: slateblue;\n}\n\n.custom-card {\n    padding: 0px;\n}\n\n.card-content {\n    margin-bottom: 10px;\n}\n\n.tag {\n    display: inline;\n    margin-right: 5px;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}