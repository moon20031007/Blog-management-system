{"ast":null,"code":"import axios from 'axios';\nconst cityOptions = ['java', 'scala', 'c++', 'anson'];\nexport default {\n  name: \"MyArticleWriteEditor\",\n  data() {\n    var validateArea = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('留言不能为空'));\n      } else {\n        callback();\n      }\n    };\n    var validateTag = (rule, value, callback) => {\n      if (value.length === 0) {\n        callback(new Error('至少选择一个标签'));\n      } else {\n        callback();\n      }\n    };\n    return {\n      messageForm: {\n        title: '',\n        tag: [],\n        textarea: ''\n      },\n      rules: {\n        title: [{\n          required: true,\n          message: '请输入标题',\n          trigger: 'blur'\n        }],\n        tag: [{\n          validator: validateTag,\n          trigger: 'change'\n        }],\n        textarea: [{\n          validator: validateArea,\n          trigger: 'blur'\n        }]\n      },\n      cities: cityOptions\n    };\n  },\n  methods: {\n    submitForm(formName) {\n      this.$refs[formName].validate(valid => {\n        const form = {\n          title: this.messageForm.title,\n          content: this.messageForm.textarea,\n          Tag: this.messageForm.tag\n        };\n        console.log(form);\n        if (valid) {\n          axios.post('http://localhost:7000/article/addd', form).then(response => {\n            console.log(response.data);\n            this.$message({\n              message: '文章提交成功！',\n              type: 'success'\n            });\n          }).catch(error => {\n            console.error('文章提交失败:', error);\n            this.$message.error('提交失败，请检查登陆状态');\n          });\n        } else {\n          return false;\n        }\n      });\n    },\n    resetForm(formName) {\n      this.$refs[formName].resetFields();\n    }\n  }\n};","map":{"version":3,"names":["axios","cityOptions","name","data","validateArea","rule","value","callback","Error","validateTag","length","messageForm","title","tag","textarea","rules","required","message","trigger","validator","cities","methods","submitForm","formName","$refs","validate","valid","form","content","Tag","console","log","post","then","response","$message","type","catch","error","resetForm","resetFields"],"sources":["src/components/ArticleWriteEditor.vue"],"sourcesContent":["<template>\r\n\r\n    <div class=\"write-card\">\r\n        <el-button plain size='small'><router-link to=\"/\">回到首页</router-link></el-button>\r\n        <el-form :model=\"messageForm\" status-icon :rules=\"rules\" ref=\"messageForm\" class=\"demo-ruleForm\">\r\n\r\n            <el-form-item prop=\"title\" class=\"input\">\r\n                <el-input class=\"title\" type=\"text\" placeholder=\"标题\" v-model=\"messageForm.title\" maxlength=\"15\">\r\n                </el-input>\r\n            </el-form-item>\r\n\r\n            <el-form-item prop=\"textarea\" class=\"writeinput\">\r\n                <el-input type=\"textarea\" placeholder=\"请输入你的文章\" :rows=\"20\" v-model=\"messageForm.textarea\"\r\n                    maxlength=\"2000\" show-word-limit>\r\n                </el-input>\r\n            </el-form-item>\r\n\r\n            <el-form-item class=\"form-checkbox\" prop=\"tag\">\r\n                <el-checkbox-group v-model=\"messageForm.tag\" :min=\"1\">\r\n                    <el-checkbox v-for=\"city in cities\" :label=\"city\" :key=\"city\">{{ city }}</el-checkbox>\r\n                </el-checkbox-group>\r\n            </el-form-item>\r\n\r\n            <el-form-item class=\"form-buttons\">\r\n                <el-button type=\"primary\" @click=\"submitForm('messageForm')\" size='small'>提交</el-button>\r\n                <el-button @click=\"resetForm('messageForm')\" size='small'>重置</el-button>\r\n            </el-form-item>\r\n        </el-form>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nconst cityOptions = ['java', 'scala', 'c++', 'anson'];\r\n\r\nexport default {\r\n    name: \"MyArticleWriteEditor\",\r\n    data() {\r\n        var validateArea = (rule, value, callback) => {\r\n            if (value === '') {\r\n                callback(new Error('留言不能为空'));\r\n            } else {\r\n                callback();\r\n            }\r\n        };\r\n        var validateTag = (rule, value, callback) => {\r\n            if (value.length === 0) {\r\n                callback(new Error('至少选择一个标签'));\r\n            } else {\r\n                callback();\r\n            }\r\n        };\r\n        return {\r\n            messageForm: {\r\n                title: '',\r\n                tag: [],\r\n                textarea: ''\r\n            },\r\n            rules: {\r\n                title: [\r\n                    { required: true, message: '请输入标题', trigger: 'blur' }\r\n                ],\r\n                tag: [\r\n                    { validator: validateTag, trigger: 'change' }\r\n                ],\r\n                textarea: [\r\n                    { validator: validateArea, trigger: 'blur' }\r\n                ]\r\n            },\r\n            cities: cityOptions\r\n        };\r\n    },\r\n    methods: {\r\n        submitForm(formName) {\r\n            this.$refs[formName].validate((valid) => {\r\n                const form = { title: this.messageForm.title, content: this.messageForm.textarea, Tag: this.messageForm.tag };\r\n                console.log(form);\r\n                if (valid) {\r\n                    axios.post('http://localhost:7000/article/addd', form)\r\n                        .then(response => {\r\n                            console.log(response.data);\r\n                            this.$message({\r\n                                message: '文章提交成功！',\r\n                                type: 'success'\r\n                            });\r\n                        })\r\n                        .catch(error => {\r\n                            console.error('文章提交失败:', error);\r\n                            this.$message.error('提交失败，请检查登陆状态');\r\n                        });\r\n                } else {\r\n                    return false;\r\n                }\r\n            });\r\n        },\r\n        resetForm(formName) {\r\n            this.$refs[formName].resetFields();\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style>\r\n.writecard {\r\n    display: flex;\r\n    justify-content: cneter;\r\n}\r\n\r\n.writeinput {\r\n    margin-bottom: 10px;\r\n    margin-top: 1.5rem;\r\n    width: 50rem;\r\n}\r\n\r\n.title {\r\n    font-size: 25px;\r\n    font-weight: bold;\r\n}\r\n\r\n.el-checkbox-group {\r\n    display: flex;\r\n    flex-direction: row;\r\n}\r\n\r\n.form-checkbox {\r\n    display: flex;\r\n    justify-content: left;\r\n    margin: 0;\r\n}\r\n\r\n.form-buttons {\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    margin-top: 0;\r\n\r\n}\r\n</style>"],"mappings":"AAgCA,OAAAA,KAAA;AAEA,MAAAC,WAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA,IAAAC,YAAA,GAAAA,CAAAC,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,IAAAD,KAAA;QACAC,QAAA,KAAAC,KAAA;MACA;QACAD,QAAA;MACA;IACA;IACA,IAAAE,WAAA,GAAAA,CAAAJ,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,IAAAD,KAAA,CAAAI,MAAA;QACAH,QAAA,KAAAC,KAAA;MACA;QACAD,QAAA;MACA;IACA;IACA;MACAI,WAAA;QACAC,KAAA;QACAC,GAAA;QACAC,QAAA;MACA;MACAC,KAAA;QACAH,KAAA,GACA;UAAAI,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,EACA;QACAL,GAAA,GACA;UAAAM,SAAA,EAAAV,WAAA;UAAAS,OAAA;QAAA,EACA;QACAJ,QAAA,GACA;UAAAK,SAAA,EAAAf,YAAA;UAAAc,OAAA;QAAA;MAEA;MACAE,MAAA,EAAAnB;IACA;EACA;EACAoB,OAAA;IACAC,WAAAC,QAAA;MACA,KAAAC,KAAA,CAAAD,QAAA,EAAAE,QAAA,CAAAC,KAAA;QACA,MAAAC,IAAA;UAAAf,KAAA,OAAAD,WAAA,CAAAC,KAAA;UAAAgB,OAAA,OAAAjB,WAAA,CAAAG,QAAA;UAAAe,GAAA,OAAAlB,WAAA,CAAAE;QAAA;QACAiB,OAAA,CAAAC,GAAA,CAAAJ,IAAA;QACA,IAAAD,KAAA;UACA1B,KAAA,CAAAgC,IAAA,uCAAAL,IAAA,EACAM,IAAA,CAAAC,QAAA;YACAJ,OAAA,CAAAC,GAAA,CAAAG,QAAA,CAAA/B,IAAA;YACA,KAAAgC,QAAA;cACAlB,OAAA;cACAmB,IAAA;YACA;UACA,GACAC,KAAA,CAAAC,KAAA;YACAR,OAAA,CAAAQ,KAAA,YAAAA,KAAA;YACA,KAAAH,QAAA,CAAAG,KAAA;UACA;QACA;UACA;QACA;MACA;IACA;IACAC,UAAAhB,QAAA;MACA,KAAAC,KAAA,CAAAD,QAAA,EAAAiB,WAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}