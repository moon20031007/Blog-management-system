{"ast":null,"code":"import axios from 'axios';\nconst cityOptions = ['上海', '北京', '广州', '深圳'];\nexport default {\n  name: \"MyArticleWriteEditor\",\n  data() {\n    var validateArea = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('留言不能为空'));\n      } else {\n        callback();\n      }\n    };\n    var validateTag = (rule, value, callback) => {\n      if (value.length === 0) {\n        callback(new Error('至少选择一个标签'));\n      } else {\n        callback();\n      }\n    };\n    return {\n      messageForm: {\n        title: '',\n        tag: [],\n        textarea: ''\n      },\n      rules: {\n        title: [{\n          required: true,\n          message: '请输入标题',\n          trigger: 'blur'\n        }],\n        tag: [{\n          validator: validateTag,\n          trigger: 'change'\n        }],\n        textarea: [{\n          validator: validateArea,\n          trigger: 'blur'\n        }]\n      },\n      cities: cityOptions\n    };\n  },\n  methods: {\n    submitForm(formName) {\n      this.$refs[formName].validate(valid => {\n        const form = {\n          Title: this.messageForm.title,\n          Text: this.messageForm.textarea,\n          Tag: this.messageForm.tag\n        };\n        if (valid) {\n          console.log('提交的留言内容:', this.messageForm.textarea);\n          axios.post('/lmessage', form).then(response => {\n            console.log(response.data);\n            this.$message({\n              message: '留言提交成功！',\n              type: 'success'\n            });\n          }).catch(error => {\n            console.error('留言提交失败:', error);\n            this.$message.error('提交失败，请检查登陆状态');\n          });\n        } else {\n          return false;\n        }\n      });\n    },\n    resetForm(formName) {\n      this.$refs[formName].resetFields();\n    }\n  }\n};","map":{"version":3,"names":["axios","cityOptions","name","data","validateArea","rule","value","callback","Error","validateTag","length","messageForm","title","tag","textarea","rules","required","message","trigger","validator","cities","methods","submitForm","formName","$refs","validate","valid","form","Title","Text","Tag","console","log","post","then","response","$message","type","catch","error","resetForm","resetFields"],"sources":["src/components/ArticleWriteEditor.vue"],"sourcesContent":["<template>\n    \n    <div class=\"write-card\">\n      <el-form :model=\"messageForm\" status-icon :rules=\"rules\" ref=\"messageForm\" class=\"demo-ruleForm\">\n\n        <el-form-item prop=\"title\" class=\"input\">\n          <el-input class=\"title\"\n            type=\"text\"\n            placeholder=\"标题\"\n            v-model=\"messageForm.title\"\n            maxlength=\"15\">\n          </el-input>\n        </el-form-item>\n  \n        <el-form-item prop=\"textarea\" class=\"writeinput\"> \n          <el-input\n            type=\"textarea\"\n            placeholder=\"请输入你的文章\"\n            :rows=\"28\"\n            v-model=\"messageForm.textarea\"\n            maxlength=\"2000\"\n            show-word-limit>\n          </el-input>\n        </el-form-item> \n\n        <el-form-item class=\"form-checkbox\" prop=\"tag\">\n          <el-checkbox-group \n            v-model=\"messageForm.tag\"\n            :min=\"1\"\n            :max=\"2\">\n            <el-checkbox v-for=\"city in cities\" :label=\"city\" :key=\"city\">{{city}}</el-checkbox>\n          </el-checkbox-group>\n        </el-form-item>\n  \n        <el-form-item class=\"form-buttons\">\n          <el-button type=\"primary\" @click=\"submitForm('messageForm')\" size='small'>提交</el-button>\n          <el-button @click=\"resetForm('messageForm')\" size='small'>重置</el-button>\n        </el-form-item>\n      </el-form>\n    </div>\n  </template>\n  \n  <script>\n  import axios from 'axios';\n  \n  const cityOptions = ['上海', '北京', '广州', '深圳'];\n  \n  export default {\n    name: \"MyArticleWriteEditor\",\n    data() {\n      var validateArea = (rule, value, callback) => {\n        if (value === '') {\n          callback(new Error('留言不能为空'));\n        } else {\n          callback();\n        }\n      };\n      var validateTag = (rule, value, callback) => {\n        if (value.length === 0) {\n          callback(new Error('至少选择一个标签'));\n        } else {\n          callback();\n        }\n      };\n      return {\n        messageForm: {\n          title: '',\n          tag: [],\n          textarea: ''\n        },\n        rules: {\n          title: [\n            { required: true, message: '请输入标题', trigger: 'blur' }\n          ],\n          tag: [\n            { validator: validateTag, trigger: 'change' }\n          ],\n          textarea: [\n            { validator: validateArea, trigger: 'blur' }\n          ]\n        },\n        cities: cityOptions\n      };\n    },\n    methods: {\n      submitForm(formName) {\n        this.$refs[formName].validate((valid) => {\n          const form = { Title: this.messageForm.title, Text: this.messageForm.textarea, Tag: this.messageForm.tag };\n          if (valid) {\n            console.log('提交的留言内容:', this.messageForm.textarea);\n            axios.post('/lmessage', form)\n              .then(response => {\n                console.log(response.data);\n                this.$message({\n                  message: '留言提交成功！',\n                  type: 'success'\n                });\n              })\n              .catch(error => {\n                console.error('留言提交失败:', error);\n                this.$message.error('提交失败，请检查登陆状态');\n              });\n          } else {\n            return false;\n          }\n        });\n      },\n      resetForm(formName) {\n        this.$refs[formName].resetFields();\n      }\n    }\n  }\n  </script>\n  \n  <style>\n  .writeinput {\n    margin-bottom: 0rem;\n    margin-top: 1.5rem;\n    width: 50rem; \n  }\n  .title {\n    font-size: 25px;\n    font-weight: bold;\n  }\n  .el-checkbox-group {\n    display: flex;\n    flex-direction: row; /* 垂直排列 */\n  }\n  .form-checkbox {\n    display: flex;\n    justify-content: center;\n    margin:0;\n\n  }\n\n  .form-buttons {\n    display: flex;\n    justify-content: flex-end;\n    margin-top:0;\n\n  }\n  </style>\n  "],"mappings":"AA2CA,OAAAA,KAAA;AAEA,MAAAC,WAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA,IAAAC,YAAA,GAAAA,CAAAC,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,IAAAD,KAAA;QACAC,QAAA,KAAAC,KAAA;MACA;QACAD,QAAA;MACA;IACA;IACA,IAAAE,WAAA,GAAAA,CAAAJ,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,IAAAD,KAAA,CAAAI,MAAA;QACAH,QAAA,KAAAC,KAAA;MACA;QACAD,QAAA;MACA;IACA;IACA;MACAI,WAAA;QACAC,KAAA;QACAC,GAAA;QACAC,QAAA;MACA;MACAC,KAAA;QACAH,KAAA,GACA;UAAAI,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,EACA;QACAL,GAAA,GACA;UAAAM,SAAA,EAAAV,WAAA;UAAAS,OAAA;QAAA,EACA;QACAJ,QAAA,GACA;UAAAK,SAAA,EAAAf,YAAA;UAAAc,OAAA;QAAA;MAEA;MACAE,MAAA,EAAAnB;IACA;EACA;EACAoB,OAAA;IACAC,WAAAC,QAAA;MACA,KAAAC,KAAA,CAAAD,QAAA,EAAAE,QAAA,CAAAC,KAAA;QACA,MAAAC,IAAA;UAAAC,KAAA,OAAAjB,WAAA,CAAAC,KAAA;UAAAiB,IAAA,OAAAlB,WAAA,CAAAG,QAAA;UAAAgB,GAAA,OAAAnB,WAAA,CAAAE;QAAA;QACA,IAAAa,KAAA;UACAK,OAAA,CAAAC,GAAA,kBAAArB,WAAA,CAAAG,QAAA;UACAd,KAAA,CAAAiC,IAAA,cAAAN,IAAA,EACAO,IAAA,CAAAC,QAAA;YACAJ,OAAA,CAAAC,GAAA,CAAAG,QAAA,CAAAhC,IAAA;YACA,KAAAiC,QAAA;cACAnB,OAAA;cACAoB,IAAA;YACA;UACA,GACAC,KAAA,CAAAC,KAAA;YACAR,OAAA,CAAAQ,KAAA,YAAAA,KAAA;YACA,KAAAH,QAAA,CAAAG,KAAA;UACA;QACA;UACA;QACA;MACA;IACA;IACAC,UAAAjB,QAAA;MACA,KAAAC,KAAA,CAAAD,QAAA,EAAAkB,WAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}