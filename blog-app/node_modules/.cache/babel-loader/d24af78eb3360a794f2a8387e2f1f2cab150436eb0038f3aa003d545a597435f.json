{"ast":null,"code":"export default {\n  name: 'MyLmessageList',\n  data() {\n    return {\n      lmessages: {},\n      users: {},\n      likeCount: {},\n      lmessageKey: 0\n    };\n  },\n  async created() {\n    await this.fetchLmessages();\n  },\n  methods: {\n    putLike(type, id) {\n      this.$http.put(`/like/${type}/${id}`).then(response => {\n        if (response.data.code == 0) {\n          let lmessage = this.lmessages.find(l => l.lmessageId == id);\n          if (this.likeCount[id] == false) {\n            lmessage.likeCount++;\n          } else {\n            lmessage.likeCount--;\n          }\n          this.likeCount[id] = !this.likeCount[id];\n          this.$message.success('点赞成功！');\n          this.$forceUpdate();\n        } else {\n          this.$message.error('点赞失败：' + response.data.msg);\n        }\n      }).catch(error => {\n        this.$message.error('点赞失败：' + error);\n      });\n    },\n    async fetchLmessages() {\n      this.$http.get('/lmessage/list').then(response => {\n        if (response.data.code == 0) {\n          this.lmessages = response.data.data;\n          this.lmessages.forEach(lmessage => {\n            if (!this.users[lmessage.commenterId]) {\n              this.users[lmessage.commenterId] = '';\n            }\n            this.likeCount[lmessage.lmessageId] = false;\n          });\n        } else {\n          this.$message.error('获取留言失败：' + response.data.msg);\n        }\n        this.fetchNames(Object.keys(this.users));\n        this.fetchLikes();\n      }).catch(error => {\n        this.$message.error('获取留言失败：' + error);\n      });\n    },\n    async fetchNames(keys) {\n      let userIdsParam = keys.length == 1 ? keys[0] : keys.join(',');\n      this.$http.get(`/user/names`, {\n        params: {\n          userIds: userIdsParam\n        }\n      }).then(response => {\n        if (response.data.code == 0) {\n          response.data.data.forEach(user => this.users[user.accountId.toString()] = user.nickname);\n          this.lmessageKey++;\n        } else {\n          this.$message.error('获取用户名失败：' + response.data.msg);\n        }\n      }).catch(error => {\n        this.$message.error('获取用户名失败：' + error);\n      });\n    },\n    async fetchLikes() {\n      this.lmessages.forEach(lmessage => {\n        this.$http.get(`/like/Lmessage/${lmessage.lmessageId}`).then(response => {\n          if (response.data.code == 0 && response.data.data == true) {\n            this.likeCount[lmessage.lmessageId] = true;\n            this.lmessageKey++;\n          }\n        }).catch(error => {\n          this.$message.error('获取点赞信息失败：' + error);\n        });\n      });\n    }\n  }\n};","map":{"version":3,"names":["name","data","lmessages","users","likeCount","lmessageKey","created","fetchLmessages","methods","putLike","type","id","$http","put","then","response","code","lmessage","find","l","lmessageId","$message","success","$forceUpdate","error","msg","catch","get","forEach","commenterId","fetchNames","Object","keys","fetchLikes","userIdsParam","length","join","params","userIds","user","accountId","toString","nickname"],"sources":["src/components/LmessageList.vue"],"sourcesContent":["<template>\r\n    <div class=\"lmessage-list\">\r\n        <p>已有留言共{{ lmessages.length }}条</p>\r\n        <main :key=\"lmessageKey\">\r\n            <article v-for=\"lmessage in lmessages\" :key=\"lmessage.lmessageId\">\r\n                <div class=\"lmessage-card\">\r\n                    <header>\r\n                        <div class=\"meta\">\r\n                            By {{ users[lmessage.commenterId] }} on {{ $formatTime(lmessage.leaveTime) }}\r\n                            <div class=\"like\" @click=\"putLike('Lmessage', lmessage.lmessageId)\">\r\n                                <i v-if=\"likeCount[lmessage.lmessageId]\" class=\"el-icon-star-on\"></i>\r\n                                <i v-else class=\"el-icon-star-off\"></i>\r\n                                {{ lmessage.likeCount }}\r\n                            </div>\r\n                        </div>\r\n                    </header>\r\n                    <section>\r\n                        <p>{{ lmessage.content }}</p>\r\n                    </section>\r\n                </div>\r\n            </article>\r\n        </main>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    name: 'MyLmessageList',\r\n    data() {\r\n        return {\r\n            lmessages: {},\r\n            users: {},\r\n            likeCount: {},\r\n            lmessageKey: 0\r\n        }\r\n    },\r\n    async created() {\r\n        await this.fetchLmessages();\r\n    },\r\n    methods: {\r\n        putLike(type, id) {\r\n            this.$http.put(`/like/${type}/${id}`)\r\n                .then(response => {\r\n                    if (response.data.code == 0) {\r\n                        let lmessage = this.lmessages.find(l => l.lmessageId == id);\r\n                        if (this.likeCount[id] == false) {\r\n                            lmessage.likeCount++;\r\n                        } else {\r\n                            lmessage.likeCount--;\r\n                        }\r\n                        this.likeCount[id] = !this.likeCount[id];\r\n                        this.$message.success('点赞成功！');\r\n                        this.$forceUpdate();\r\n                    } else {\r\n                        this.$message.error('点赞失败：' + response.data.msg);\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    this.$message.error('点赞失败：' + error);\r\n                })\r\n        },\r\n        async fetchLmessages() {\r\n            this.$http.get('/lmessage/list')\r\n                .then(response => {\r\n                    if (response.data.code == 0) {\r\n                        this.lmessages = response.data.data;\r\n                        this.lmessages.forEach(lmessage => {\r\n                            if (!this.users[lmessage.commenterId]) {\r\n                                this.users[lmessage.commenterId] = '';\r\n                            }\r\n                            this.likeCount[lmessage.lmessageId] = false;\r\n                        });\r\n                    } else {\r\n                        this.$message.error('获取留言失败：' + response.data.msg);\r\n                    }\r\n                    this.fetchNames(Object.keys(this.users));\r\n                    this.fetchLikes();\r\n                })\r\n                .catch(error => {\r\n                    this.$message.error('获取留言失败：' + error);\r\n                });\r\n        },\r\n        async fetchNames(keys) {\r\n            let userIdsParam = keys.length == 1 ? keys[0] : keys.join(',');\r\n            this.$http.get(`/user/names`, { params: { userIds: userIdsParam } })\r\n                .then(response => {\r\n                    if (response.data.code == 0) {\r\n                        response.data.data.forEach(user => this.users[user.accountId.toString()] = user.nickname);\r\n                        this.lmessageKey++;\r\n                    } else {\r\n                        this.$message.error('获取用户名失败：' + response.data.msg);\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    this.$message.error('获取用户名失败：' + error);\r\n                });\r\n        },\r\n        async fetchLikes() {\r\n            this.lmessages.forEach(lmessage => {\r\n                this.$http.get(`/like/Lmessage/${lmessage.lmessageId}`)\r\n                    .then(response => {\r\n                        if (response.data.code == 0 && response.data.data == true) {\r\n                            this.likeCount[lmessage.lmessageId] = true;\r\n                            this.lmessageKey++;\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        this.$message.error('获取点赞信息失败：' + error);\r\n                    });\r\n            });\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style>\r\n.lmessage-list {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 1rem;\r\n    margin: 3rem;\r\n    border: 1px solid #ddd;\r\n    padding: 1rem;\r\n    border-radius: 0.5rem;\r\n    box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.lmessage-card {\r\n    border: 1px solid #ddd;\r\n    padding: 1rem;\r\n    border-radius: 0.5rem;\r\n\r\n}\r\n\r\narticle .meta {\r\n    font-size: 0.9em;\r\n    color: #666;\r\n}\r\n.like {\r\n    cursor: pointer;\r\n    display: inline-block;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}