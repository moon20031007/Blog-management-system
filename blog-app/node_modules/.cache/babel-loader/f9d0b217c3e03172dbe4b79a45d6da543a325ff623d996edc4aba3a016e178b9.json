{"ast":null,"code":"export default {\n  data() {\n    return {\n      Tag: {},\n      Articles: [],\n      users: {},\n      articleKey: 0\n    };\n  },\n  async created() {\n    await this.fetchTag();\n    await this.fetchArticles();\n  },\n  methods: {\n    async fetchTag() {\n      this.$http.get(`/tag/detail/${this.$route.params.id}`).then(response => {\n        if (response.data.code == 0) {\n          this.Tag = response.data.data;\n        } else {\n          this.$message.error('获取标签失败：' + response.data.msg);\n        }\n      }).catch(error => {\n        this.$message.error('获取标签失败：' + error);\n      });\n    },\n    async fetchArticles() {\n      this.$http.get(`/tag/${this.$route.params.id}/articles`).then(response => {\n        if (response.data.code == 0) {\n          this.Articles = response.data.data;\n          this.Articles.forEach(article => {\n            if (!this.users[article.authorId]) {\n              this.users[article.authorId] = '';\n            }\n          });\n        } else {\n          this.$message.error('获取文章失败：' + response.data.msg);\n        }\n        this.fetchNames(Object.keys(this.users));\n      }).catch(error => {\n        this.$message.error('获取文章失败：' + error);\n      });\n    },\n    async fetchNames(keys) {\n      if (keys.length == 0) {\n        return;\n      }\n      let userIdsParam = keys.length == 1 ? keys[0] : keys.join(',');\n      this.$http.get(`/user/names`, {\n        params: {\n          userIds: userIdsParam\n        }\n      }).then(response => {\n        if (response.data.code == 0) {\n          response.data.data.forEach(user => this.users[user.accountId.toString()] = user.nickname);\n          this.articleKey++;\n        } else {\n          this.$message.error('获取用户名失败：' + response.data.msg);\n        }\n      }).catch(error => {\n        this.$message.error('获取用户名失败：' + error);\n      });\n    }\n  }\n};","map":{"version":3,"names":["data","Tag","Articles","users","articleKey","created","fetchTag","fetchArticles","methods","$http","get","$route","params","id","then","response","code","$message","error","msg","catch","forEach","article","authorId","fetchNames","Object","keys","length","userIdsParam","join","userIds","user","accountId","toString","nickname"],"sources":["src/views/TagSearchPage.vue"],"sourcesContent":["<template>\n    <div>\n        <my-nav></my-nav>\n        <br><br><br>\n        <h1>{{ this.Tag.tagName }}</h1>\n        <h3>相关文章数量: {{ this.Tag.articleCount }}</h3>\n        <my-art-list :key=\"articleKey\" :articles=\"this.Articles\" :users=\"this.users\"></my-art-list>\n    </div>\n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            Tag: {},\n            Articles: [],\n            users: {},\n            articleKey: 0\n        }\n    },\n    async created() {\n        await this.fetchTag();\n        await this.fetchArticles();\n    },\n    methods: {\n        async fetchTag() {\n            this.$http.get(`/tag/detail/${this.$route.params.id}`)\n                .then(response => {\n                    if (response.data.code == 0) {\n                        this.Tag = response.data.data;\n                    } else {\n                        this.$message.error('获取标签失败：' + response.data.msg);\n                    }\n                })\n                .catch(error => {\n                    this.$message.error('获取标签失败：' + error);\n                });\n        },\n        async fetchArticles() {\n            this.$http.get(`/tag/${this.$route.params.id}/articles`)\n                .then(response => {\n                    if (response.data.code == 0) {\n                        this.Articles = response.data.data;\n                        this.Articles.forEach(article => {\n                            if (!this.users[article.authorId]) {\n                                this.users[article.authorId] = '';\n                            }\n                        });\n                    } else {\n                        this.$message.error('获取文章失败：' + response.data.msg);\n                    }\n                    this.fetchNames(Object.keys(this.users));\n                })\n                .catch(error => {\n                    this.$message.error('获取文章失败：' + error);\n                });\n        },\n        async fetchNames(keys) {\n            if (keys.length == 0) {return;}\n            let userIdsParam = keys.length == 1 ? keys[0] : keys.join(',');\n            this.$http.get(`/user/names`, { params: { userIds: userIdsParam } })\n                .then(response => {\n                    if (response.data.code == 0) {\n                        response.data.data.forEach(user => this.users[user.accountId.toString()] = user.nickname);\n                        this.articleKey++;\n                    } else {\n                        this.$message.error('获取用户名失败：' + response.data.msg);\n                    }\n                })\n                .catch(error => {\n                    this.$message.error('获取用户名失败：' + error);\n                });\n        }\n    }\n}\n</script>\n\n<style>\nh1,h3 {\n    text-align: center;\n    color: aliceblue;\n}\n</style>"],"mappings":"AAWA;EACAA,KAAA;IACA;MACAC,GAAA;MACAC,QAAA;MACAC,KAAA;MACAC,UAAA;IACA;EACA;EACA,MAAAC,QAAA;IACA,WAAAC,QAAA;IACA,WAAAC,aAAA;EACA;EACAC,OAAA;IACA,MAAAF,SAAA;MACA,KAAAG,KAAA,CAAAC,GAAA,qBAAAC,MAAA,CAAAC,MAAA,CAAAC,EAAA,IACAC,IAAA,CAAAC,QAAA;QACA,IAAAA,QAAA,CAAAf,IAAA,CAAAgB,IAAA;UACA,KAAAf,GAAA,GAAAc,QAAA,CAAAf,IAAA,CAAAA,IAAA;QACA;UACA,KAAAiB,QAAA,CAAAC,KAAA,aAAAH,QAAA,CAAAf,IAAA,CAAAmB,GAAA;QACA;MACA,GACAC,KAAA,CAAAF,KAAA;QACA,KAAAD,QAAA,CAAAC,KAAA,aAAAA,KAAA;MACA;IACA;IACA,MAAAX,cAAA;MACA,KAAAE,KAAA,CAAAC,GAAA,cAAAC,MAAA,CAAAC,MAAA,CAAAC,EAAA,aACAC,IAAA,CAAAC,QAAA;QACA,IAAAA,QAAA,CAAAf,IAAA,CAAAgB,IAAA;UACA,KAAAd,QAAA,GAAAa,QAAA,CAAAf,IAAA,CAAAA,IAAA;UACA,KAAAE,QAAA,CAAAmB,OAAA,CAAAC,OAAA;YACA,UAAAnB,KAAA,CAAAmB,OAAA,CAAAC,QAAA;cACA,KAAApB,KAAA,CAAAmB,OAAA,CAAAC,QAAA;YACA;UACA;QACA;UACA,KAAAN,QAAA,CAAAC,KAAA,aAAAH,QAAA,CAAAf,IAAA,CAAAmB,GAAA;QACA;QACA,KAAAK,UAAA,CAAAC,MAAA,CAAAC,IAAA,MAAAvB,KAAA;MACA,GACAiB,KAAA,CAAAF,KAAA;QACA,KAAAD,QAAA,CAAAC,KAAA,aAAAA,KAAA;MACA;IACA;IACA,MAAAM,WAAAE,IAAA;MACA,IAAAA,IAAA,CAAAC,MAAA;QAAA;MAAA;MACA,IAAAC,YAAA,GAAAF,IAAA,CAAAC,MAAA,QAAAD,IAAA,MAAAA,IAAA,CAAAG,IAAA;MACA,KAAApB,KAAA,CAAAC,GAAA;QAAAE,MAAA;UAAAkB,OAAA,EAAAF;QAAA;MAAA,GACAd,IAAA,CAAAC,QAAA;QACA,IAAAA,QAAA,CAAAf,IAAA,CAAAgB,IAAA;UACAD,QAAA,CAAAf,IAAA,CAAAA,IAAA,CAAAqB,OAAA,CAAAU,IAAA,SAAA5B,KAAA,CAAA4B,IAAA,CAAAC,SAAA,CAAAC,QAAA,MAAAF,IAAA,CAAAG,QAAA;UACA,KAAA9B,UAAA;QACA;UACA,KAAAa,QAAA,CAAAC,KAAA,cAAAH,QAAA,CAAAf,IAAA,CAAAmB,GAAA;QACA;MACA,GACAC,KAAA,CAAAF,KAAA;QACA,KAAAD,QAAA,CAAAC,KAAA,cAAAA,KAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}