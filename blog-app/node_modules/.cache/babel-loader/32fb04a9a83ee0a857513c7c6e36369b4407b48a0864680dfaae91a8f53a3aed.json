{"ast":null,"code":"export default {\n  name: 'MyLmessageList',\n  data() {\n    return {\n      lmessages: [],\n      uers: {}\n    };\n  },\n  async created() {\n    await this.fetchLmessages();\n  },\n  methods: {\n    async fetchLmessages() {\n      this.$http.get('/lmessage/list').then(response => {\n        if (response.data.code == 0) {\n          this.lmessages = response.data.data;\n        } else {\n          this.$message.error('获取留言失败：' + response.data.msg);\n        }\n      }).catch(error => {\n        this.$message.error('获取留言失败：' + error);\n      });\n    },\n    async fetchNames(keys) {\n      this.$http.get(`/user/names`, {\n        params: {\n          userIds: keys.join(',')\n        }\n      }).then(response => {\n        if (response.data.code == 0) {\n          response.data.data.forEach(user => this.users[user.accountId.toString()] = user.nickname);\n          this.articleKey++;\n        } else {\n          this.$message.error('获取用户名失败：' + response.data.msg);\n        }\n      }).catch(error => {\n        this.$message.error('获取用户名失败：' + error);\n      });\n    }\n  }\n};","map":{"version":3,"names":["name","data","lmessages","uers","created","fetchLmessages","methods","$http","get","then","response","code","$message","error","msg","catch","fetchNames","keys","params","userIds","join","forEach","user","users","accountId","toString","nickname","articleKey"],"sources":["src/components/LmessageList.vue"],"sourcesContent":["<template>\r\n    <div class=\"lmessage-list\">\r\n        <p>已有留言共{{ lmessages.length }}条</p>\r\n        <main>\r\n            <article v-for=\"lmessage in lmessages\" :key=\"lmessage.lmessageId\">\r\n                <div class=\"lmessage-card\">\r\n                    <header>\r\n                        <p class=\"meta\">By 用户{{ lmessage.commenterId }} on {{ $formatTime(lmessage.leaveTime) }}</p>\r\n                    </header>\r\n                    <section>\r\n                        <p>{{ lmessage.content }}</p>\r\n                    </section>\r\n                </div>\r\n            </article>\r\n        </main>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    name: 'MyLmessageList',\r\n    data() {\r\n        return {\r\n            lmessages: [],\r\n            uers: {}\r\n        }\r\n    },\r\n    async created() {\r\n        await this.fetchLmessages();\r\n    },\r\n    methods: {\r\n        async fetchLmessages() {\r\n            this.$http.get('/lmessage/list')\r\n                .then(response => {\r\n                    if (response.data.code == 0) {\r\n                        this.lmessages = response.data.data;                    \r\n                    } else {\r\n                        this.$message.error('获取留言失败：' + response.data.msg);\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    this.$message.error('获取留言失败：' + error);\r\n                });\r\n        },\r\n        async fetchNames(keys) {\r\n            this.$http.get(`/user/names`, { params: { userIds: keys.join(',') } })\r\n                .then(response => {\r\n                    if (response.data.code == 0) {\r\n                        response.data.data.forEach(user => this.users[user.accountId.toString()] = user.nickname);\r\n                        this.articleKey++;\r\n                    } else {\r\n                        this.$message.error('获取用户名失败：' + response.data.msg);\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    this.$message.error('获取用户名失败：' + error);\r\n                });\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style>\r\n.lmessage-list {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 1rem;\r\n    margin: 3rem;\r\n    border: 1px solid #ddd;\r\n    padding: 1rem;\r\n    border-radius: 0.5rem;\r\n    box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.lmessage-card {\r\n    border: 1px solid #ddd;\r\n    padding: 1rem;\r\n    border-radius: 0.5rem;\r\n\r\n}\r\n\r\narticle .meta {\r\n    font-size: 0.9em;\r\n    color: #666;\r\n}\r\n</style>"],"mappings":"AAmBA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,SAAA;MACAC,IAAA;IACA;EACA;EACA,MAAAC,QAAA;IACA,WAAAC,cAAA;EACA;EACAC,OAAA;IACA,MAAAD,eAAA;MACA,KAAAE,KAAA,CAAAC,GAAA,mBACAC,IAAA,CAAAC,QAAA;QACA,IAAAA,QAAA,CAAAT,IAAA,CAAAU,IAAA;UACA,KAAAT,SAAA,GAAAQ,QAAA,CAAAT,IAAA,CAAAA,IAAA;QACA;UACA,KAAAW,QAAA,CAAAC,KAAA,aAAAH,QAAA,CAAAT,IAAA,CAAAa,GAAA;QACA;MACA,GACAC,KAAA,CAAAF,KAAA;QACA,KAAAD,QAAA,CAAAC,KAAA,aAAAA,KAAA;MACA;IACA;IACA,MAAAG,WAAAC,IAAA;MACA,KAAAV,KAAA,CAAAC,GAAA;QAAAU,MAAA;UAAAC,OAAA,EAAAF,IAAA,CAAAG,IAAA;QAAA;MAAA,GACAX,IAAA,CAAAC,QAAA;QACA,IAAAA,QAAA,CAAAT,IAAA,CAAAU,IAAA;UACAD,QAAA,CAAAT,IAAA,CAAAA,IAAA,CAAAoB,OAAA,CAAAC,IAAA,SAAAC,KAAA,CAAAD,IAAA,CAAAE,SAAA,CAAAC,QAAA,MAAAH,IAAA,CAAAI,QAAA;UACA,KAAAC,UAAA;QACA;UACA,KAAAf,QAAA,CAAAC,KAAA,cAAAH,QAAA,CAAAT,IAAA,CAAAa,GAAA;QACA;MACA,GACAC,KAAA,CAAAF,KAAA;QACA,KAAAD,QAAA,CAAAC,KAAA,cAAAA,KAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}