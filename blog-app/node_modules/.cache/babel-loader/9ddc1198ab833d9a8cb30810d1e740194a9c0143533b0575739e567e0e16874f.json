{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: \"MyArticleWriteEditor\",\n  data() {\n    var valiteArea = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('留言不能为空'));\n      } else {\n        callback();\n      }\n    };\n    return {\n      messageForm: {\n        textarea: ''\n      },\n      rules: {\n        textarea: [{\n          validator: valiteArea,\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  methods: {\n    submitForm(formName) {\n      this.$refs[formName].validate(valid => {\n        const form = {\n          Title: this.messageForm.title,\n          Title: this.messageForm.textarea\n        };\n        if (valid) {\n          console.log('提交的留言内容:', this.ruleForm.textarea);\n          axios.post('/lmessage', form).then(response => {\n            console.log(response.data);\n            this.$message({\n              message: '留言提交成功！',\n              type: 'success'\n            });\n          }).catch(error => {\n            console.error('留言提交失败:', error);\n            this.$message.error('登录失败，请检查登陆状态');\n          });\n        } else {\n          return false;\n        }\n      });\n    },\n    resetForm(formName) {\n      this.$refs[formName].resetFields();\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","valiteArea","rule","value","callback","Error","messageForm","textarea","rules","validator","trigger","methods","submitForm","formName","$refs","validate","valid","form","Title","title","console","log","ruleForm","post","then","response","$message","message","type","catch","error","resetForm","resetFields"],"sources":["src/components/ArticleWriteEditor.vue"],"sourcesContent":["<template>\n    <div class=\"write-card\">\n\n        \n      <el-form :model=\"messageForm\" status-icon :rules=\"rules\" ref=\"messageForm\" class=\"demo-ruleForm\">\n        <el-form-item prop=\"title\" class=\"input\">\n            <el-input class=\"title\"\n              type=\"text\"\n              placeholder=\"标题\"\n              v-model=\"messageForm.title\"\n              maxlength=\"15\"\n            >\n            </el-input>\n        </el-form-item> \n        <el-form-item prop=\"textarea\" class=\"input\">\n            <el-input\n              type=\"textarea\"\n              placeholder=\"请输入你的文章\"\n              :rows=\"30\"\n              v-model=\"messageForm.textarea\"\n              maxlength=\"100\"\n              show-word-limit\n            >\n            </el-input>\n        </el-form-item> \n        <el-form-item class=\"form-buttons\">\n                  <el-button type=\"primary\" @click=\"submitForm('messageForm') \" size='small'>提交</el-button>\n                  <el-button @click=\"resetForm('messageForm')\" size='small' >重置</el-button>\n        </el-form-item>\n      </el-form>\n      </div>\n  </template>\n  \n  \n  <script>\n  import axios from 'axios';\n  \n  export default {\n    name:\"MyArticleWriteEditor\",\n    data() {\n      var valiteArea = (rule, value, callback) => {\n              if (value === '') {\n                  callback(new Error('留言不能为空'));\n              } else {\n                  callback();\n              }\n          };\n          return{\n              messageForm: {\n                  textarea: ''\n              },\n              rules: {\n                  textarea: [\n                      { validator: valiteArea, trigger: 'blur' }\n                  ]\n              }\n          };\n    },\n    methods: {\n          submitForm(formName) {\n              this.$refs[formName].validate((valid) => {\n                  const form = { Title: this.messageForm.title,Title:this.messageForm.textarea};\n                  if (valid) {\n                      console.log('提交的留言内容:', this.ruleForm.textarea);\n                      axios.post('/lmessage', form)\n                          .then(response => {\n                              console.log(response.data);\n                              this.$message({\n                                  message: '留言提交成功！',\n                                  type: 'success'\n                              });\n                          })\n                          .catch(error => {\n                              console.error('留言提交失败:', error);\n                              this.$message.error('登录失败，请检查登陆状态',);\n                          });\n                  } else {\n                      return false;\n                  }\n              });\n          },\n          resetForm(formName) {\n              this.$refs[formName].resetFields();\n          }\n      }\n    \n  }\n  </script>\n  \n  <style>\n\n  .input {\n      margin-bottom: 0.5rem;\n      margin-top: 1.5rem;\n      width: 50rem; \n  }\n  .title{\n    font-size: 25px;\n    font-weight: bold;\n  }\n  \n  .form-buttons {\n    display: flex;\n    justify-content: flex-end;\n  }\n  \n  \n  </style>"],"mappings":"AAmCA,OAAAA,KAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA,IAAAC,UAAA,GAAAA,CAAAC,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,IAAAD,KAAA;QACAC,QAAA,KAAAC,KAAA;MACA;QACAD,QAAA;MACA;IACA;IACA;MACAE,WAAA;QACAC,QAAA;MACA;MACAC,KAAA;QACAD,QAAA,GACA;UAAAE,SAAA,EAAAR,UAAA;UAAAS,OAAA;QAAA;MAEA;IACA;EACA;EACAC,OAAA;IACAC,WAAAC,QAAA;MACA,KAAAC,KAAA,CAAAD,QAAA,EAAAE,QAAA,CAAAC,KAAA;QACA,MAAAC,IAAA;UAAAC,KAAA,OAAAZ,WAAA,CAAAa,KAAA;UAAAD,KAAA,OAAAZ,WAAA,CAAAC;QAAA;QACA,IAAAS,KAAA;UACAI,OAAA,CAAAC,GAAA,kBAAAC,QAAA,CAAAf,QAAA;UACAT,KAAA,CAAAyB,IAAA,cAAAN,IAAA,EACAO,IAAA,CAAAC,QAAA;YACAL,OAAA,CAAAC,GAAA,CAAAI,QAAA,CAAAzB,IAAA;YACA,KAAA0B,QAAA;cACAC,OAAA;cACAC,IAAA;YACA;UACA,GACAC,KAAA,CAAAC,KAAA;YACAV,OAAA,CAAAU,KAAA,YAAAA,KAAA;YACA,KAAAJ,QAAA,CAAAI,KAAA;UACA;QACA;UACA;QACA;MACA;IACA;IACAC,UAAAlB,QAAA;MACA,KAAAC,KAAA,CAAAD,QAAA,EAAAmB,WAAA;IACA;EACA;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}